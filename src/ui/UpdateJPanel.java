/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Image;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.Employee;
import model.EmployeeHistory;

/**
 *
 * @author rajmehta
 */
public class UpdateJPanel extends javax.swing.JPanel {
    
    EmployeeHistory history;
    
    /**
     * Creates new form UpdateJPanel
     */
    public UpdateJPanel() {
        initComponents();
    }
    
    public UpdateJPanel(EmployeeHistory history) {
        initComponents();
        this.history = history;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        inpGender = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        lblStartDate = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        lblTeamInfo = new javax.swing.JLabel();
        lblPositionTitle = new javax.swing.JLabel();
        lblContactInfo = new javax.swing.JLabel();
        lblCellPhoneNumber = new javax.swing.JLabel();
        lblEmailAddress = new javax.swing.JLabel();
        lblPhoto = new javax.swing.JLabel();
        inpNameText = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblEmployeeID = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        inpEmpIDText = new javax.swing.JTextField();
        lblPhotoIcon = new javax.swing.JLabel();
        inpAgeText = new javax.swing.JTextField();
        inpStartDateText = new javax.swing.JTextField();
        inpLevelText = new javax.swing.JTextField();
        inpTeamInfoText = new javax.swing.JTextField();
        inpPositionTitleText = new javax.swing.JTextField();
        inpCellPhoneText = new javax.swing.JTextField();
        inpEmailText = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        inpCriteriaText = new javax.swing.JTextField();
        inpCriteriaFilter = new javax.swing.JComboBox<>();
        inpUpdateFilter = new javax.swing.JComboBox<>();
        inpUpdateText = new javax.swing.JTextField();
        criteriaText = new javax.swing.JLabel();
        updateText = new javax.swing.JLabel();

        setBackground(new java.awt.Color(240, 242, 255));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Update Employee");

        lblGender.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblGender.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblGender.setText("Gender :");

        lblStartDate.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblStartDate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblStartDate.setText("Start Date :");

        lblLevel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblLevel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblLevel.setText("Level :");

        lblTeamInfo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblTeamInfo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTeamInfo.setText("Team Info :");

        lblPositionTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblPositionTitle.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPositionTitle.setText("Position Title :");

        lblContactInfo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblContactInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblContactInfo.setText("Contact Details");

        lblCellPhoneNumber.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblCellPhoneNumber.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCellPhoneNumber.setText("Mobile :");

        lblEmailAddress.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblEmailAddress.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblEmailAddress.setText("Email :");

        lblPhoto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblPhoto.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPhoto.setText("Photo :");

        lblName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblName.setText("Name :");

        lblEmployeeID.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblEmployeeID.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblEmployeeID.setText("Employee ID :");

        lblAge.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblAge.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblAge.setText("Age :");

        inpEmailText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpEmailTextActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        inpCriteriaFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "EmployeeID", "Age", "Gender", "StartDate", "Level", "TeamInfo", "PositionTitle", "CellPhoneNumber", "EmailAddress" }));

        inpUpdateFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "EmployeeID", "Age", "Gender", "StartDate", "Level", "TeamInfo", "PositionTitle", "CellPhoneNumber", "EmailAddress" }));

        criteriaText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        criteriaText.setText("Update Criteria");

        updateText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateText.setText("Update Value");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCellPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inpEmailText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpCellPhoneText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpPositionTitleText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpTeamInfoText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpLevelText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpAgeText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpEmpIDText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(inpNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(lblPhotoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(inpGender)
                            .addComponent(inpStartDateText)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inpCriteriaFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(inpCriteriaText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(criteriaText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inpUpdateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(inpUpdateText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(updateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lblContactInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(criteriaText)
                    .addComponent(updateText))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inpCriteriaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpCriteriaFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpUpdateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpUpdateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpEmpIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpAgeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpStartDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpLevelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpTeamInfoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpPositionTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblContactInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCellPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpCellPhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inpEmailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPhotoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inpEmailTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpEmailTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpEmailTextActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        HashMap<String, Integer> filterKeys = new HashMap<String, Integer>();
        filterKeys.put("Name", 0);
        filterKeys.put("EmployeeID", 1);
        filterKeys.put("Age", 2);
        filterKeys.put("Gender", 3);
        filterKeys.put("StartDate", 4);
        filterKeys.put("Level", 5);
        filterKeys.put("TeamInfo", 6);
        filterKeys.put("PositionTitle", 7);
        filterKeys.put("CellPhoneNumber", 8);
        filterKeys.put("EmailAddress", 9);
        
        ArrayList<Employee> emplist = history.getHistory();
        String criteriaFilter = inpCriteriaFilter.getSelectedItem().toString();
        String inpCriteria = inpCriteriaText.getText().toString();
        Object row[] = new Object[11];
        String criteriaCheck = null;
        String updateFilter = inpUpdateFilter.getSelectedItem().toString();
        String inpUpdate = inpUpdateText.getText().toString();
        int index = 0;
        int count = 0;
        int new_ind = filterKeys.get(updateFilter);
        SimpleDateFormat startDate = new SimpleDateFormat("yyyy-MM-dd");
        
        for (int i=0; i<emplist.size(); i++){

            if( (criteriaFilter == "Name")  && (inpCriteria.equals(emplist.get(i).getName())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getName());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }

            if( (criteriaFilter == "EmployeeID")  && (inpCriteria.equals(String.valueOf(emplist.get(i).getEmployeeID()))) ){
                criteriaCheck = String.valueOf(String.valueOf(emplist.get(i).getEmployeeID()));
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "Age")  && (inpCriteria.equals(emplist.get(i).getAge())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getAge());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "Gender")  && (inpCriteria.equals(emplist.get(i).getGender())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getGender());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "StartDate")  && (inpCriteria.equals(emplist.get(i).getStartDate())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getStartDate());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "Level")  && (inpCriteria.equals(emplist.get(i).getLevel())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getLevel());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "TeamInfo")  && (inpCriteria.equals(emplist.get(i).getTeamInfo())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getTeamInfo());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "PositionTitle")  && (inpCriteria.equals(emplist.get(i).getPositionTitle())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getPositionTitle());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "CellPhoneNumber")  && (inpCriteria.equals(emplist.get(i).getCellPhoneNumber())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getCellPhoneNumber());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
            if( (criteriaFilter == "EmailAddress")  && (inpCriteria.equals(emplist.get(i).getEmailAddress())) ){
                criteriaCheck = String.valueOf(emplist.get(i).getEmailAddress());
                if(criteriaCheck.equals(inpCriteria.toString())){
                    index = i;
                    count++;
                }
            }
        }
        
        if(count == 0){
            JOptionPane.showMessageDialog(this, "No Entry Found");
        }
        else if(count>=2){
            JOptionPane.showMessageDialog(this, "Duplicate Entry Found");
        }
        else{
            for (int i=0; i<emplist.size(); i++){
                
                if( (criteriaFilter == "Name")  && (inpCriteria.equals(emplist.get(i).getName())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getName());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "EmployeeID")  && (inpCriteria.equals(String.valueOf(emplist.get(i).getEmployeeID()))) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getEmployeeID());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "Age")  && (inpCriteria.equals(String.valueOf(emplist.get(i).getAge()))) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getAge());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "Gender")  && (inpCriteria.equals(emplist.get(i).getGender())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getGender());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "StartDate")  && (inpCriteria.equals(emplist.get(i).getStartDate())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getStartDate());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "Level")  && (inpCriteria.equals(emplist.get(i).getLevel())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getLevel());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "TeamInfo")  && (inpCriteria.equals(emplist.get(i).getTeamInfo())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getTeamInfo());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "PositionTitle")  && (inpCriteria.equals(emplist.get(i).getPositionTitle())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getPositionTitle());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "CellPhoneNumber")  && (inpCriteria.equals(String.valueOf(emplist.get(i).getCellPhoneNumber()))) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getCellPhoneNumber());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
                
                if( (criteriaFilter == "EmailAddress")  && (inpCriteria.equals(emplist.get(i).getEmailAddress())) ){
                    criteriaCheck = String.valueOf(emplist.get(i).getEmailAddress());
                    if(criteriaCheck.equals(inpCriteria.toString())){
                        index = i;
                        count++;
                        if(criteriaCheck.equals(inpCriteria)){
                            row[0] = emplist.get(i).getName();
                            row[1] = emplist.get(i).getEmployeeID();
                            row[2] = emplist.get(i).getAge();
                            row[3] = emplist.get(i).getGender();
                            row[4] = emplist.get(i).getStartDate();
                            row[5] = emplist.get(i).getLevel();
                            row[6] = emplist.get(i).getTeamInfo();
                            row[7] = emplist.get(i).getPositionTitle();
                            row[8] = emplist.get(i).getCellPhoneNumber();
                            row[9] = emplist.get(i).getEmailAddress();
                            row[new_ind]= inpUpdate;

                            if(updateFilter == "Name"){emplist.get(i).setName(inpUpdate);}
                            if(updateFilter == "EmployeeID"){emplist.get(i).setEmployeeID(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Age"){emplist.get(i).setAge(Integer.parseInt(inpUpdate));}
                            if(updateFilter == "Gender"){emplist.get(i).setGender(String.valueOf(inpUpdate));}
                            if(updateFilter == "StartDate"){try {
                                emplist.get(i).setStartDate(startDate.parse(inpUpdate));
                                } catch (ParseException ex) {
                                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(updateFilter == "Level"){emplist.get(i).setLevel(String.valueOf(inpUpdate));}
                            if(updateFilter == "TeamInfo"){emplist.get(i).setTeamInfo(String.valueOf(inpUpdate));}
                            if(updateFilter == "PositionTitle"){emplist.get(i).setPositionTitle(String.valueOf(inpUpdate));}
                            if(updateFilter == "CellPhoneNumber"){emplist.get(i).setCellPhoneNumber(Long.parseLong(inpUpdate));}
                            if(updateFilter == "EmailAddress"){emplist.get(i).setEmailAddress(String.valueOf(inpUpdate));}
                        }
                    }
                }
            
                inpNameText.setText(String.valueOf(row[0]));
                inpEmpIDText.setText(String.valueOf(row[1]));
                inpAgeText.setText(String.valueOf(row[2]));
                inpGender.setText(String.valueOf(row[3]));
                inpStartDateText.setText(String.valueOf(row[4]));
                inpLevelText.setText(String.valueOf(row[5]));
                inpTeamInfoText.setText(String.valueOf(row[6]));
                inpPositionTitleText.setText(String.valueOf(row[7]));
                inpCellPhoneText.setText(String.valueOf(row[8]));
                inpEmailText.setText(String.valueOf(row[9]));

                String imgPath = String.valueOf(emplist.get(index).getPhoto());
                FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGES", "png", "jpeg", "jpg");
                JFileChooser browseFile = new JFileChooser();
                ImageIcon img = new ImageIcon(imgPath);
                Image image = img.getImage().getScaledInstance(lblPhotoIcon.getWidth(), lblPhotoIcon.getHeight(), Image.SCALE_SMOOTH);
                lblPhotoIcon.setIcon(new ImageIcon(image));
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel criteriaText;
    private javax.swing.JTextField inpAgeText;
    private javax.swing.JTextField inpCellPhoneText;
    private javax.swing.JComboBox<String> inpCriteriaFilter;
    private javax.swing.JTextField inpCriteriaText;
    private javax.swing.JTextField inpEmailText;
    private javax.swing.JTextField inpEmpIDText;
    private javax.swing.JTextField inpGender;
    private javax.swing.JTextField inpLevelText;
    private javax.swing.JTextField inpNameText;
    private javax.swing.JTextField inpPositionTitleText;
    private javax.swing.JTextField inpStartDateText;
    private javax.swing.JTextField inpTeamInfoText;
    private javax.swing.JComboBox<String> inpUpdateFilter;
    private javax.swing.JTextField inpUpdateText;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCellPhoneNumber;
    private javax.swing.JLabel lblContactInfo;
    private javax.swing.JLabel lblEmailAddress;
    private javax.swing.JLabel lblEmployeeID;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblPhotoIcon;
    private javax.swing.JLabel lblPositionTitle;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblTeamInfo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel updateText;
    // End of variables declaration//GEN-END:variables
}
