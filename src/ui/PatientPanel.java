/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import model.*;
import parser.Parser;

/**
 *
 * @author rajmehta
 */
public class PatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientPanel
     */
    Community comm = new Community();
    Patient pat =new Patient();
    ArrayList<Community> commList;
    ArrayList<Patient> patList;
    Parser parser = new Parser();
    PatientDirectory patDir; 
    Hospital newHospital;
    ArrayList<Doctor> docs;
    String patCommunity = "";
    City city;
    Community community;
    HospitalDirectory hospDir;
    Doctor dd;
    Hospital hh;
    DoctorDirectory docDir;
    DefaultTableModel model;
    Doctor doc_pat;
    Patient pat_doc;
    
    ArrayList<Hospital> arr_hosp;
    
    public PatientPanel() {
        initComponents();  
    }
    
    public PatientPanel(DoctorDirectory docDir, String[] communityList, PatientDirectory patDir, Hospital newHospital, City city, HospitalDirectory hospDir) {
        initComponents();  
        this.patDir = patDir;
        this.newHospital = newHospital;
        this.city = city;
        this.hospDir = hospDir;
        this.docDir = docDir;
        
        doctor_community_dropbox.removeAllItems();
        doctor_community_dropbox.addItem(" ");
       
        for(Community commList:city.getCommList()){
            doctor_community_dropbox.addItem(commList.getCommName());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        doctor_community_dropbox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        searchDoctor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctor_table = new javax.swing.JTable();
        view_doctor = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        doctor_name = new javax.swing.JTextField();
        doctor_id = new javax.swing.JTextField();
        doctor_community = new javax.swing.JTextField();
        doctor_hospital = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        patient_id = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 989, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(0, 118, 82));
        setForeground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Zapfino", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Look for a doctor under the near hospitals");

        doctor_community_dropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("OR Select Community:");

        searchDoctor.setText("Search");
        searchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDoctorActionPerformed(evt);
            }
        });

        doctor_table.setAutoCreateRowSorter(true);
        doctor_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Did", "Community", "Hospital Num"
            }
        ));
        doctor_table.setSelectionBackground(new java.awt.Color(0, 102, 0));
        jScrollPane1.setViewportView(doctor_table);

        view_doctor.setText("View Doctor Details");
        view_doctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_doctorActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name:");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Did:");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Community:");

        doctor_name.setEditable(false);

        doctor_id.setEditable(false);

        doctor_community.setEditable(false);

        doctor_hospital.setEditable(false);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Hospital:");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Patient ID:");

        jButton1.setText("Book an Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patient_id, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctor_community_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(view_doctor, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jButton1)
                        .addGap(295, 295, 295))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(694, 694, 694))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doctor_id, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctor_community, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctor_hospital, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(320, 320, 320)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patient_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctor_community_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))))
                .addGap(26, 26, 26)
                .addComponent(searchDoctor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(view_doctor)
                    .addComponent(jButton1))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctor_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctor_community, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(doctor_hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDoctorActionPerformed
        // TODO add your handling code here:
        
        
        if(!parser.isLong(patient_id.getText())){
            JOptionPane.showMessageDialog(this, "Mismatched ID types");
        }
        
        if(patient_id.getText().isEmpty() && doctor_community_dropbox.getSelectedItem().toString() == " "){
            JOptionPane.showMessageDialog(this, "Cannot keep both options empty");
        }
        else if(!patient_id.getText().isEmpty() && doctor_community_dropbox.getSelectedItem().toString() != " "){
            System.out.println("patient_id.getText(): "+patient_id.getText());
            System.out.println("doctor_community_dropbox.getSelectedItem().toString(): "+doctor_community_dropbox.getSelectedItem().toString());
            JOptionPane.showMessageDialog(this, "Please Use only one option");
        }
        else if(doctor_community_dropbox.getSelectedItem().toString() != " "){
            System.out.println(doctor_community_dropbox.getSelectedItem().toString());
          if(String.valueOf(doctor_community_dropbox.getSelectedItem()) != " "){
              System.out.println("Inside Patient Community");
               String searchDoctorComm = doctor_community_dropbox.getSelectedItem().toString();
               for(Community c: city.getCommList()){
                   if(c.getCommName() == searchDoctorComm)
                       community = c;
               }
               
               DefaultTableModel model = (DefaultTableModel) doctor_table.getModel();
               model.setRowCount(0);
               
               for(Hospital h: community.getHospitalList()){
                   for(Doctor d : h.getDoctorHospital()){
                       Object[] row = new Object[4];
                        row[0] = d.getPerson().getName();
                        row[1] = d.getId();
                        row[2] = searchDoctorComm;
                        row[3] = h.getHospNum();
                        model.addRow(row);
                   }
               }
          }
        }
        else{
            if(!patient_id.getText().isEmpty()){
            patList = patDir.getPatientList();
            for(int i=0; i<patList.size();i++){
                System.out.println("Inside Pat Dir traversal");
                System.out.println(patList.get(i).getPerson().getName());
                if(Integer.parseInt(patient_id.getText()) == patList.get(i).getId() ){
                    Person p = patList.get(i).getPerson();
                    patCommunity = p.getComm();
                    System.out.println("Patient belongs to:"+patCommunity);
                    }     
                }
            if(patCommunity == ""){
                JOptionPane.showMessageDialog(this, "Patient not found");
            }
            else{
               
                Community a;
                ArrayList<Doctor> doc_hosp_comm;
                model = (DefaultTableModel) doctor_table.getModel();
                model.setRowCount(0);
                
                for(Community i : city.getCommList()){
                    if(i.getCommName() == patCommunity){
                         arr_hosp= i.getHospitalList();
                         for(Hospital l: i.getHospitalList()){
                             doc_hosp_comm = l.getDoctorHospital();
                             for(Doctor d: doc_hosp_comm){
                                Object[] row = new Object[4];
                                row[0] = d.getPerson().getName();
                                row[1] = d.getId();
                                row[2] = patCommunity;
                                row[3] = l.getHospNum();
                                model.addRow(row);
                            }
                         }
                    }         
            }
        }//end if search by pid
 
        }
      }
   
    }//GEN-LAST:event_searchDoctorActionPerformed

    private void view_doctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_doctorActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = doctor_table.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to view");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) doctor_table.getModel();
            long did = (long)model.getValueAt(doctor_table.getSelectedRow(), 1);
            for(Hospital h: hospDir.getHospitalList()){
                for(Doctor d:h.getDoctorHospital()){
                    if(d.getId() == did){
                        hh = h;
                        dd = d;
                    }
                }
            }
        
            doctor_id.setText(String.valueOf(dd.getId()));
            doctor_name.setText(String.valueOf((dd.getPerson().getName())));
            doctor_community.setText(String.valueOf(dd.getPerson().getComm()));
            doctor_hospital.setText(String.valueOf(hh.getHospNum()));
        }
    }//GEN-LAST:event_view_doctorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel) doctor_table.getModel();
        if(doctor_table.getSelectedRow()>=0 && !(patient_id.getText().isEmpty())){
            long sel_did = (long) model.getValueAt(doctor_table.getSelectedRow(), 1);
            
            for(Patient p:patDir.getPatientList()){
                if(Long.parseLong(patient_id.getText()) == p.getId()){
                    pat_doc = p;
                }//end if
            }//end for 
            
            for(Doctor d:docDir.getDoctorList()){
                if(sel_did == d.getId()){
                    doc_pat = d;
                    if(!(d.getPatientsAssignToDoctor()).contains(pat_doc))
                    {
                        d.BookPatientAppointnent(pat_doc);
                        JOptionPane.showMessageDialog(this, "Booked Appointment for Patient "+patient_id.getText()+ " with doctor "+doc_pat.getPerson().getName());
                    }
                    else{JOptionPane.showMessageDialog(this, "Appoint already booked!");}
                }//end if
            }//end for
            
        }//end if
        else{
            JOptionPane.showMessageDialog(this, "Please select a Doctor or search by patId");
        }//end else
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField doctor_community;
    private javax.swing.JComboBox<String> doctor_community_dropbox;
    private javax.swing.JTextField doctor_hospital;
    private javax.swing.JTextField doctor_id;
    private javax.swing.JTextField doctor_name;
    private javax.swing.JTable doctor_table;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patient_id;
    private javax.swing.JButton searchDoctor;
    private javax.swing.JButton view_doctor;
    // End of variables declaration//GEN-END:variables
}
