/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.*;
import parser.Parser;

/**
 *
 * @author rajmehta
 */
public class SystemAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminPanel
     */
    City city;
    String[] communityList;
    String[] communityDropboxList;
    PatientDirectory patDir;
    Hospital newHospital;
    HospitalDirectory hospDir;
    EncounterHistory encounterDir;
    PersonDirectory pd;
    DoctorDirectory docDir;
    MainSystem sys;
    Patient patient;
    Patient patient1;
    DefaultTableModel model_dr;
    DefaultTableModel model_dr1;
    ArrayList<Patient> patientList;
    ArrayList<Patient> patList;
    Patient selectedPat;
    VitalSigns selectedPatVitalSigns;
    Encounter enc;
    DefaultTableModel model_hos;
    
    
    
    public SystemAdminPanel(City city, String[] communityDropboxList, PatientDirectory patDir, HospitalDirectory hospDir,PersonDirectory pd, DoctorDirectory docDir, MainSystem sys) {
        initComponents();
        this.city = city;
        this.communityDropboxList = communityDropboxList;
        this.pd=pd;
        this.docDir=docDir;
        this.sys = sys;
        this.patDir = patDir;
       
        patientList = patDir.getPatientList();
        this.docDir = docDir;
        
        showPersonTable();
        showCityTable();
        showCommunityTable();
        showPatientTable();
        
        
        for(Community commList:city.getCommList()){
            for(House hosList: commList.getHouseList()){
                houselistComboBox.addItem(String.valueOf(hosList.getHouseNum()));
            }
            
        }
//        for(House h: community.getHouseList()){
        model_dr = (DefaultTableModel) person_dir_table.getModel();
        model_dr.setRowCount(0);
        
        model_dr1 = (DefaultTableModel) person_directory_table.getModel();
        model_dr1.setRowCount(0);
        
        model_hos = (DefaultTableModel) hospital_table.getModel();
        
        for(Patient p:patientList){
            Object[] row= new Object[3];
            row[0]= p.getId();
            row[1]= p.getPerson().getName();
            row[2]= p.getPerson().getAge();
            model_dr.addRow(row);
            model_dr1.addRow(row);
        }
        
        patient_dropbox.removeAllItems();
        for(Patient p: patDir.getPatientList()){
            patient_dropbox.addItem(String.valueOf(p.getId()));
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        landingPanel = new javax.swing.JPanel();
        managePersonbtn = new javax.swing.JButton();
        managePatientbtn = new javax.swing.JButton();
        manageDoctorbtn = new javax.swing.JButton();
        manageHospitalbtn = new javax.swing.JButton();
        manageCitybtn = new javax.swing.JButton();
        manageEnc = new javax.swing.JButton();
        managePerson = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        persontable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        personName = new javax.swing.JTextField();
        personAge = new javax.swing.JTextField();
        personDate = new javax.swing.JTextField();
        personContactNo = new javax.swing.JTextField();
        communityComboBox = new javax.swing.JComboBox<>();
        createPersonBtn = new javax.swing.JButton();
        personAge1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        viewPersonBtn = new javax.swing.JButton();
        communityComboBox1 = new javax.swing.JComboBox<>();
        personContactNo1 = new javax.swing.JTextField();
        personDate1 = new javax.swing.JTextField();
        personName1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deletePersonBtn = new javax.swing.JButton();
        updatePersonBtn = new javax.swing.JButton();
        addpersontohousebtn = new javax.swing.JButton();
        houselistComboBox = new javax.swing.JComboBox<>();
        manageCity = new javax.swing.JPanel();
        createCityBtn = new javax.swing.JButton();
        cityComboBox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        deleteCityBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        citytable = new javax.swing.JTable();
        cityComboBox1 = new javax.swing.JComboBox<>();
        viewCityBtn = new javax.swing.JButton();
        updateCityBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        communitytable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        addcommunityComboBox = new javax.swing.JComboBox<>();
        createCommunityBtn = new javax.swing.JButton();
        newcommunityComboBox = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        viewCommunityBtn = new javax.swing.JButton();
        deleteCommunityBtn = new javax.swing.JButton();
        updateCommunityBtn = new javax.swing.JButton();
        managePatient = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        patienttable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        persontable2 = new javax.swing.JTable();
        addpatientbtn = new javax.swing.JButton();
        deletepatientbtn = new javax.swing.JButton();
        viewpatientbtn = new javax.swing.JButton();
        updatepatientbtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        patientidtextfield = new javax.swing.JTextField();
        patientnametextfield = new javax.swing.JTextField();
        patientagetextfield = new javax.swing.JTextField();
        manageEncounter = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        person_dir_table = new javax.swing.JTable();
        add_vitals_button = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        blood_pressure = new javax.swing.JTextField();
        heart_rate = new javax.swing.JTextField();
        weight_ui = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        symptoms_ui = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        person_directory_table = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        view_encounter = new javax.swing.JTable();
        view_encounter_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        patient_dropbox = new javax.swing.JComboBox<>();
        searchEncounter = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        encounter_table = new javax.swing.JTable();
        updateEncounter = new javax.swing.JButton();
        deleteEncounter = new javax.swing.JButton();
        updateFilter = new javax.swing.JComboBox<>();
        updateText = new javax.swing.JTextField();
        manageDoctorsPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        doctor_table = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        doctor_name = new javax.swing.JTextField();
        doctor_cellno = new javax.swing.JTextField();
        doctor_birthdate = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        persontable1 = new javax.swing.JTable();
        save_updateddoctor = new javax.swing.JButton();
        add_doctorBtn = new javax.swing.JButton();
        populatetables = new javax.swing.JButton();
        hopital_list = new javax.swing.JComboBox<>();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        managePersonbtn.setText("Manage Person");
        managePersonbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePersonbtnActionPerformed(evt);
            }
        });

        managePatientbtn.setText("Manage Patient");
        managePatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePatientbtnActionPerformed(evt);
            }
        });

        manageDoctorbtn.setText("Manage Doctor");

        manageHospitalbtn.setText("Manage Hospital");

        manageCitybtn.setText("Manage City/Community");
        manageCitybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCitybtnActionPerformed(evt);
            }
        });

        manageEnc.setText("Manage Encounters");
        manageEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout landingPanelLayout = new javax.swing.GroupLayout(landingPanel);
        landingPanel.setLayout(landingPanelLayout);
        landingPanelLayout.setHorizontalGroup(
            landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(landingPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageDoctorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePersonbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageCitybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(manageEnc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageHospitalbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(managePatientbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                .addGap(133, 133, 133))
        );
        landingPanelLayout.setVerticalGroup(
            landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(landingPanelLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managePersonbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageDoctorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageHospitalbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageCitybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageEnc, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(193, Short.MAX_VALUE))
        );

        add(landingPanel, "card2");

        persontable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Dob", "Contact No", "Community"
            }
        ));
        jScrollPane1.setViewportView(persontable);
        if (persontable.getColumnModel().getColumnCount() > 0) {
            persontable.getColumnModel().getColumn(1).setResizable(false);
            persontable.getColumnModel().getColumn(1).setHeaderValue("Age");
            persontable.getColumnModel().getColumn(2).setHeaderValue("Dob");
            persontable.getColumnModel().getColumn(3).setHeaderValue("Contact No");
            persontable.getColumnModel().getColumn(4).setHeaderValue("Community");
        }

        jLabel1.setText("Name");

        jLabel2.setText("Age");

        jLabel3.setText("DOB");

        jLabel4.setText("Community");

        jLabel5.setText("Contact No");

        communityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Suffolk", "Sapphire" }));

        createPersonBtn.setText("Create Person");
        createPersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPersonBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Community");

        jLabel7.setText("DOB");

        jLabel8.setText("Age");

        jLabel9.setText("Name");

        viewPersonBtn.setText("View");
        viewPersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPersonBtnActionPerformed(evt);
            }
        });

        communityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Suffolk", "Sapphire" }));

        jLabel10.setText("Contact No");

        deletePersonBtn.setText("Delete");
        deletePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonBtnActionPerformed(evt);
            }
        });

        updatePersonBtn.setText("Update");
        updatePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonBtnActionPerformed(evt);
            }
        });

        addpersontohousebtn.setText("Add Person to House");
        addpersontohousebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpersontohousebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managePersonLayout = new javax.swing.GroupLayout(managePerson);
        managePerson.setLayout(managePersonLayout);
        managePersonLayout.setHorizontalGroup(
            managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(managePersonLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personAge, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(communityComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 373, Short.MAX_VALUE)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(personName1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personContactNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(communityComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addComponent(viewPersonBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deletePersonBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updatePersonBtn)))
                .addGap(37, 37, 37))
            .addGroup(managePersonLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(houselistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(addpersontohousebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        managePersonLayout.setVerticalGroup(
            managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personAge, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(communityComboBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personName1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personContactNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(communityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletePersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatePersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(houselistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addpersontohousebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        add(managePerson, "card3");

        createCityBtn.setText("Add City");
        createCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCityBtnActionPerformed(evt);
            }
        });

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Cambridge", "Worchester", " " }));

        jLabel14.setText("City");

        jLabel15.setText("City");

        deleteCityBtn.setText("Delete");
        deleteCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityBtnActionPerformed(evt);
            }
        });

        citytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "City Name"
            }
        ));
        jScrollPane2.setViewportView(citytable);

        cityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Cambridge", "Worchester", " " }));

        viewCityBtn.setText("View");
        viewCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCityBtnActionPerformed(evt);
            }
        });

        updateCityBtn.setText("Update");
        updateCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityBtnActionPerformed(evt);
            }
        });

        communitytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Community Name", "City Name"
            }
        ));
        jScrollPane3.setViewportView(communitytable);

        jLabel16.setText("Community");

        addcommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Hampshire", "Suffolk", "Franklin" }));

        createCommunityBtn.setText("Add Community");
        createCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCommunityBtnActionPerformed(evt);
            }
        });

        newcommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Hampshire", "Suffolk", "Franklin" }));

        jLabel17.setText("Community");

        viewCommunityBtn.setText("View");
        viewCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCommunityBtnActionPerformed(evt);
            }
        });

        deleteCommunityBtn.setText("Delete");
        deleteCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityBtnActionPerformed(evt);
            }
        });

        updateCommunityBtn.setText("Update");
        updateCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCityLayout = new javax.swing.GroupLayout(manageCity);
        manageCity.setLayout(manageCityLayout);
        manageCityLayout.setHorizontalGroup(
            manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityLayout.createSequentialGroup()
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageCityLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(viewCityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteCityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateCityBtn))
                            .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(manageCityLayout.createSequentialGroup()
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39)
                                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(createCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(224, 224, 224)
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageCityLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(newcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(viewCommunityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteCommunityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateCommunityBtn))
                            .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(manageCityLayout.createSequentialGroup()
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39)
                                    .addComponent(addcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(createCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(43, 43, 43))
        );
        manageCityLayout.setVerticalGroup(
            manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(152, Short.MAX_VALUE))
        );

        add(manageCity, "card4");

        patienttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Patient Age"
            }
        ));
        jScrollPane4.setViewportView(patienttable);

        persontable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Dob", "Contact No", "Community"
            }
        ));
        jScrollPane5.setViewportView(persontable2);
        if (persontable2.getColumnModel().getColumnCount() > 0) {
            persontable2.getColumnModel().getColumn(1).setResizable(false);
            persontable2.getColumnModel().getColumn(1).setHeaderValue("Age");
            persontable2.getColumnModel().getColumn(2).setHeaderValue("Dob");
            persontable2.getColumnModel().getColumn(3).setHeaderValue("Contact No");
            persontable2.getColumnModel().getColumn(4).setHeaderValue("Community");
        }

        addpatientbtn.setText("Add Patient");
        addpatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpatientbtnActionPerformed(evt);
            }
        });

        deletepatientbtn.setText("Delete Patient");
        deletepatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletepatientbtnActionPerformed(evt);
            }
        });

        viewpatientbtn.setText("View Patient");
        viewpatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewpatientbtnActionPerformed(evt);
            }
        });

        updatepatientbtn.setText("Update Patient");
        updatepatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatepatientbtnActionPerformed(evt);
            }
        });

        jLabel11.setText("Patient Id:");

        jLabel12.setText("Patient Name:");

        jLabel13.setText("Patient Age:");

        patientidtextfield.setEditable(false);

        javax.swing.GroupLayout managePatientLayout = new javax.swing.GroupLayout(managePatient);
        managePatient.setLayout(managePatientLayout);
        managePatientLayout.setHorizontalGroup(
            managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientLayout.createSequentialGroup()
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePatientLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managePatientLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addpatientbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletepatientbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(33, 33, 33)
                        .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientagetextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientnametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientidtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(228, Short.MAX_VALUE))
            .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(managePatientLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(245, Short.MAX_VALUE)))
        );
        managePatientLayout.setVerticalGroup(
            managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 244, Short.MAX_VALUE)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(patientidtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(patientnametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(patientagetextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94))
            .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(managePatientLayout.createSequentialGroup()
                    .addGap(230, 230, 230)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(250, Short.MAX_VALUE)))
        );

        add(managePatient, "card5");

        jLabel18.setFont(new java.awt.Font("Zapfino", 0, 18)); // NOI18N
        jLabel18.setText("Diagnose and Leave encounter record based on vital signs");

        person_dir_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Patient Age"
            }
        ));
        jScrollPane6.setViewportView(person_dir_table);

        add_vitals_button.setText("Add Vitals");
        add_vitals_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_vitals_buttonActionPerformed(evt);
            }
        });

        jLabel19.setText("Blood Pressure:");

        jLabel20.setText("Heart Rate:");

        jLabel21.setText("Weight:");

        jLabel22.setText("Symptoms:");

        symptoms_ui.setColumns(20);
        symptoms_ui.setRows(5);
        jScrollPane7.setViewportView(symptoms_ui);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(blood_pressure)
                            .addComponent(heart_rate, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                        .addGap(0, 445, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(61, 61, 61)
                                .addComponent(weight_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(46, 46, 46)
                        .addComponent(add_vitals_button, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 295, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weight_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add_vitals_button)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(blood_pressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(heart_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel21)
                        .addGap(6, 6, 6)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("Add Encounters", jPanel2);

        person_directory_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane8.setViewportView(person_directory_table);

        view_encounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(view_encounter);

        view_encounter_button.setText("View Encounters");
        view_encounter_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_encounter_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                            .addComponent(jScrollPane8)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(view_encounter_button)))
                .addContainerGap(241, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(view_encounter_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("View Encounters", jPanel3);

        jLabel23.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel23.setText("Select Patient ID:");

        patient_dropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchEncounter.setText("Search");
        searchEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEncounterActionPerformed(evt);
            }
        });

        encounter_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Eid", "VisitDate", "BloodPressure", "HeartRate", "Weight", "Symptoms"
            }
        ));
        jScrollPane10.setViewportView(encounter_table);

        updateEncounter.setText("Update");
        updateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEncounterActionPerformed(evt);
            }
        });

        deleteEncounter.setText("Delete");
        deleteEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEncounterActionPerformed(evt);
            }
        });

        updateFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BloodPressure", "HeartRate", "Weight", "Symptoms" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(updateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateText, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patient_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchEncounter)))
                .addGap(85, 85, 85))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(patient_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchEncounter))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateEncounter)
                    .addComponent(deleteEncounter)
                    .addComponent(updateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Update/Delete Encounter", jPanel1);

        javax.swing.GroupLayout manageEncounterLayout = new javax.swing.GroupLayout(manageEncounter);
        manageEncounter.setLayout(manageEncounterLayout);
        manageEncounterLayout.setHorizontalGroup(
            manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterLayout.createSequentialGroup()
                .addGroup(manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageEncounterLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel18))
                    .addGroup(manageEncounterLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageEncounterLayout.setVerticalGroup(
            manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(manageEncounter, "card6");

        doctor_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Id", "Contact No", "Doctor Name", "Age", "Community"
            }
        ));
        jScrollPane11.setViewportView(doctor_table);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Update Doctor");

        jLabel25.setText("Name:");

        jLabel26.setText("Contact No:");

        jLabel27.setText("BirthDate:");

        persontable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Contact No", "BirthDate", "Community"
            }
        ));
        jScrollPane12.setViewportView(persontable1);

        save_updateddoctor.setText("Save");

        add_doctorBtn.setText("Add Doctor");
        add_doctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_doctorBtnActionPerformed(evt);
            }
        });

        populatetables.setText("Populate Tables");
        populatetables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populatetablesActionPerformed(evt);
            }
        });

        hopital_list.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(jTable1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel28.setText("Community:");

        jButton1.setText("jButton1");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("Update");

        jButton3.setText("Delete");

        javax.swing.GroupLayout manageDoctorsPanelLayout = new javax.swing.GroupLayout(manageDoctorsPanel);
        manageDoctorsPanel.setLayout(manageDoctorsPanelLayout);
        manageDoctorsPanelLayout.setHorizontalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField1)
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addComponent(add_doctorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(populatetables, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(hopital_list, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(458, 458, 458)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(save_updateddoctor))
                                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                                .addGap(62, 62, 62)
                                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(doctor_birthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(doctor_cellno, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageDoctorsPanelLayout.setVerticalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(jButton1))
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(doctor_cellno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel27)
                                    .addComponent(doctor_birthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(add_doctorBtn)
                                .addComponent(populatetables)
                                .addComponent(hopital_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(save_updateddoctor))
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addGap(23, 23, 23))
        );

        add(manageDoctorsPanel, "card5");
    }// </editor-fold>//GEN-END:initComponents

    private void managePersonbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePersonbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        managePerson.setVisible(true);
    }//GEN-LAST:event_managePersonbtnActionPerformed

    private void createPersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPersonBtnActionPerformed
        // TODO add your handling code here:
        Person newPerson = new Person();
        newPerson.setName(personName.getText());
        newPerson.setAge(Integer.parseInt(personAge.getText()));
//         String dob = "1-Jan-2021";
        Parser parser = new Parser();
        LocalDate date =parser.convertToDate(personDate.getText());
        newPerson.setDob(date);
        newPerson.setContactNo(Long.parseLong(personContactNo.getText()));
        newPerson.setComm(communityComboBox.getSelectedItem()+"");
        pd.addPersonToDirectory(newPerson);
        showPersonTable();
        
    }//GEN-LAST:event_createPersonBtnActionPerformed

    private void viewPersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view person info");
            return;
        }
        else{
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        personName1.setText(String.valueOf(personobj.getName()));
        personAge1.setText(String.valueOf(personobj.getAge()));
        personDate1.setText(String.valueOf(personobj.getDob().toString()));
        personContactNo1.setText(String.valueOf(personobj.getContactNo()));
        communityComboBox1.setSelectedItem(String.valueOf(personobj.getComm()));
        }
    }//GEN-LAST:event_viewPersonBtnActionPerformed

    private void deletePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete person info");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        pd.getPersonList().remove(personobj);
        showPersonTable();
        }
    }//GEN-LAST:event_deletePersonBtnActionPerformed

    private void updatePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update info");
            return;
        }
        else{
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        personobj.setName(personName1.getText());
        personobj.setAge(Integer.parseInt(personAge1.getText()));
        Parser parser = new Parser();
        LocalDate date =parser.convertToDate(personDate1.getText());
        personobj.setDob(date);
        personobj.setContactNo(Long.parseLong(personContactNo1.getText()));
        personobj.setComm(communityComboBox1.getSelectedItem()+"");
        showPersonTable();
        }
    }//GEN-LAST:event_updatePersonBtnActionPerformed

    private void createCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCityBtnActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        for(City cityy: sys.getCityList()) {
            if(cityy.getCitName() == cityComboBox.getSelectedItem()){
                System.out.println(cityComboBox.getSelectedItem());
               flag=false;
            }
        }
        if(flag == false){
           JOptionPane.showMessageDialog(this, "City already Exists");
            return;
        }
        else{
        sys.addCity(String.valueOf(cityComboBox.getSelectedItem()));
        showCityTable();
        }
        
    }//GEN-LAST:event_createCityBtnActionPerformed

    private void deleteCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to delete");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        if (!cityobj.getCommList().isEmpty()){
            JOptionPane.showMessageDialog(this, "Cannot delete a city with communities");
        }
        else{
        sys.removeCity(cityobj);
        showCityTable();
        }
        }
        
    }//GEN-LAST:event_deleteCityBtnActionPerformed

    private void viewCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to view");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        cityComboBox1.setSelectedItem(cityobj.getCitName());
        }
    }//GEN-LAST:event_viewCityBtnActionPerformed

    private void updateCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to update");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        cityobj.setCitName(String.valueOf(cityComboBox1.getSelectedItem()));
        showCityTable();
        }
    }//GEN-LAST:event_updateCityBtnActionPerformed

    private void manageCitybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCitybtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        manageCity.setVisible(true);
        
    }//GEN-LAST:event_manageCitybtnActionPerformed

    private void createCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        Community newCom = new Community(String.valueOf(addcommunityComboBox.getSelectedItem()));
        cityobj.getCommList().add(newCom);
        showCommunityTable();
        }
        
        
        
    }//GEN-LAST:event_createCommunityBtnActionPerformed

    private void viewCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communitytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to view");
            return;
        }
        else{
        DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
        String commname = String.valueOf(modelcommunity.getValueAt(selectedRowIndex, 1));
        newcommunityComboBox.setSelectedItem(commname);
        }
        
    }//GEN-LAST:event_viewCommunityBtnActionPerformed

    private void deleteCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communitytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to delete");
            return;
        }
        else{
        DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
        City cityobj = (City) modelcommunity.getValueAt(selectedRowIndex, 0);
        
                for(Community comobj: cityobj.getCommList()){
                    if(comobj.getCommName() == newcommunityComboBox.getSelectedItem()){
                    cityobj.getCommList().remove(comobj);
                    showCommunityTable();
                    JOptionPane.showMessageDialog(this, "Community removed");
                }
                }
      
        }
    }//GEN-LAST:event_deleteCommunityBtnActionPerformed

    private void updateCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCommunityBtnActionPerformed

    private void addpersontohousebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpersontohousebtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelperson = (DefaultTableModel) persontable.getModel();
            Person personobj = (Person) modelperson.getValueAt(selectedRowIndex, 0);
            for(City cityList: sys.getCityList()){
            for(Community commList:cityList.getCommList()){
                for(House hosList: commList.getHouseList()){
                    if((hosList.getHouseNum()) == Integer.parseInt(houselistComboBox.getSelectedItem()+"")){
                        hosList.addPersonToHouse(personobj);
                        JOptionPane.showMessageDialog(this, "Person added to house");
                        return;
                    }

                }

            }
            }
        }
        
    }//GEN-LAST:event_addpersontohousebtnActionPerformed

    private void managePatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePatientbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        managePatient.setVisible(true);
    }//GEN-LAST:event_managePatientbtnActionPerformed

    private void addpatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpatientbtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = persontable2.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) persontable2.getModel();
            Person personobj = (Person) modelpp.getValueAt(selectedRowIndex, 0);
            patDir.createPatient(personobj);
            showPatientTable();
        }
        
    }//GEN-LAST:event_addpatientbtnActionPerformed

    private void deletepatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletepatientbtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
            patDir.getPatientList().remove(pp);
            showPatientTable();
            JOptionPane.showMessageDialog(this, "Patient Successfully deleted");
            return;
                }
        }
        }
    }//GEN-LAST:event_deletepatientbtnActionPerformed

    private void viewpatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewpatientbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
                    patientidtextfield.setText(String.valueOf(pp.getId()));
                    patientnametextfield.setText(pp.getPerson().getName());
                    patientagetextfield.setText(String.valueOf(pp.getPerson().getAge()));
                }
        }
        }
        
    }//GEN-LAST:event_viewpatientbtnActionPerformed

    private void updatepatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatepatientbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
                    pp.getPerson().setName(patientnametextfield.getText());
                    pp.getPerson().setAge(Integer.parseInt(patientagetextfield.getText()));
                    showPatientTable();
                }
        }
        }
    }//GEN-LAST:event_updatepatientbtnActionPerformed

    private void manageEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEncActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        manageEncounter.setVisible(true);
    }//GEN-LAST:event_manageEncActionPerformed

    private void add_vitals_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_vitals_buttonActionPerformed
        // TODO add your handling code here:
        
            if(person_dir_table.getSelectedRow()<0){
                JOptionPane.showMessageDialog(this, "Please select a Patient");
            }
            else{
                long patient_id_check= (long)model_dr.getValueAt(person_dir_table.getSelectedRow(), 0);
                System.out.println("Patient ID Check: "+patient_id_check);

                for(Patient i:patientList){
                    if(patient_id_check == i.getId()){
                        patient = i;
                    }
                }
                float bloodPressure = Float.parseFloat(blood_pressure.getText());
                float heartRate = Float.parseFloat(heart_rate.getText());
                float weight = Float.parseFloat(weight_ui.getText());
                String symptoms = symptoms_ui.getText();

                patient.getEncounterHistory().addEncounter(new VitalSigns(bloodPressure, heartRate, weight, symptoms));
                JOptionPane.showMessageDialog(this, "Visit saved successfully!");

            }//end else

    }//GEN-LAST:event_add_vitals_buttonActionPerformed

    private void view_encounter_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_encounter_buttonActionPerformed
        // TODO add your handling code here:
        if(person_dir_table.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Patient");
        }
        else{

            DefaultTableModel model2 = (DefaultTableModel) view_encounter.getModel();
            model2.setRowCount(0);

            long patient_id_check= (long)model_dr1.getValueAt(person_directory_table.getSelectedRow(), 0);
            System.out.println("Patient ID Check: "+patient_id_check);

            for(Patient i:patientList){
                if(patient_id_check == i.getId()){
                    patient1 = i;
                }
            }

            ArrayList<Encounter> patient_encounter = patient1.getPatientEncounterHistory();
            for(Encounter e:patient_encounter){
                Object[] row = new Object[10];
                row[0] = e.getLastVisitDate();
                row[1] = e.getId();
                row[2]=e.getVital().getBloodPressure();
                model2.addRow(row);
            }

        }//end else
    }//GEN-LAST:event_view_encounter_buttonActionPerformed

    private void searchEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEncounterActionPerformed
        // TODO add your handling code here:
        if(patient_dropbox.getSelectedItem().toString() == " "){
            JOptionPane.showMessageDialog(this, "Please Select Patient ID");
        }
        else{
            boolean found = false;
            DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
            model.setRowCount(0);
            
            patList = patDir.getPatientList();
            for(int i=0; i<patList.size(); i++){
                System.out.println(patList.get(i).getPerson().getName());
                if(Integer.parseInt(patient_dropbox.getSelectedItem().toString()) == patList.get(i).getId()){
                    selectedPat = patList.get(i);
                    found = true;
                    for(Encounter e: selectedPat.getPatientEncounterHistory()){
                        Object[] row = new Object[5];
                        row[0] = e.getId();
                        row[1] = e.getLastVisitDate();
                        row[2] = e.getVital().getBloodPressure();
                        row[3] = e.getVital().getHeartRate();
                        row[4] = e.getVital().getWeight();
                        model.addRow(row);
                    }
                }
                
            }
            if(!found){
               JOptionPane.showMessageDialog(this, "Patient not found");
            }
        }
        
    }//GEN-LAST:event_searchEncounterActionPerformed

    private void updateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEncounterActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        
        if(encounter_table.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Hospital");
        }
        else{
            long eid_check= (long)model.getValueAt(encounter_table.getSelectedRow(), 0);
            String encupdate_str = updateText.getText();
            
            for(Encounter e: selectedPat.getPatientEncounterHistory()){
                if(e.getId() == eid_check){
                    selectedPatVitalSigns =e.getVital();
                }
            }

            String updateFilterCriteria = String.valueOf(updateFilter.getSelectedItem());
            if(updateFilterCriteria == " "){
                JOptionPane.showMessageDialog(this,"Select Valid Dropbox Item");
            }
            
            else{
                if(updateFilterCriteria == "BloodPressure"){
                    float new_bp = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setBloodPressure(new_bp);
                    populateVitalTable();
                }

                if(updateFilterCriteria == "HeartRate"){
                    float new_hr = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setHeartRate(new_hr);
                    populateVitalTable();
                }

                if(updateFilterCriteria == "Weight"){
                    float new_w = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setWeight(new_w);
                    populateVitalTable();
                }
            }
        }
        
    }//GEN-LAST:event_updateEncounterActionPerformed

    private void deleteEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEncounterActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        int selectedRowIndex = encounter_table.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        else{
            
            long eid_check= (long)model.getValueAt(encounter_table.getSelectedRow(), 0);
            for(Encounter e: selectedPat.getPatientEncounterHistory()){
                if(e.getId() == eid_check){
                    enc = e;
                }
            }
            
            selectedPat.getEncounterHistory().DeleteEncounter(enc);
            populateVitalTable();
        }
    }//GEN-LAST:event_deleteEncounterActionPerformed

    private void add_doctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_doctorBtnActionPerformed
        // TODO add your handling code here:
        if(persontable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a person to add");
        }
        if(hopital_list.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Please select a hospital to add doctor");
        }
        else
        {
            long ppn = (long)model12.getValueAt(persontable.getSelectedRow(),1);
            for(Person p : pd.getPersonList()){
                if(ppn == p.getContactNo()){
                    selectedPerson = p;
                }
            }

            for(Hospital h : hospitalDirectory.getHospitalList()){
                if(Integer.parseInt((String)hopital_list.getSelectedItem()) == h.getHospNum()){
                    selectedHospital = h;
                }
            }

            boolean should_doc = false;
            for(Patient p: patDir.getPatientList()){
                if(p.matchByContact(selectedPerson.getContactNo())){
                    JOptionPane.showMessageDialog(this, "This Person is a Patient and cannot become Doctor");
                    should_doc = true;
                }
            }

            if(!should_doc){
                selectedHospital.addDoctorToHospital(new Doctor(selectedPerson));
                JOptionPane.showMessageDialog(this, "Added "+selectedPerson.getName()+ " to Hospital");
                should_doc = false;

            }

        }//end else

        //            for (Hospital hos : community.getHospitalList()) {
            //
            //                hos.getDoctorHospital().add(dr);
            ////            for(Doctor dr: hos.getDoctorHospital()){
                ////
                ////            }
            //        }
        ////            int hospNum_check= (int)model.getValueAt(hospital_table.getSelectedRow(), 0);
        //            String hospupdate_str = update_hospital.getText();
        //
        //            for(Hospital i:community.getHospitalList()){
            //                if(hospNum_check == i.getHospNum()){
                //                    hospital = i;
                //                }
            //            }

    }//GEN-LAST:event_add_doctorBtnActionPerformed

    private void populatetablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populatetablesActionPerformed
        // TODO add your handling code here:
        model12 = (DefaultTableModel) persontable.getModel();
        model12.setRowCount(0);

        long[] doc_cnum = new long[docDir.getDoctorList().size()];

        for(int i=0; i<(docDir.getDoctorList()).size(); i++){
            doc_cnum[i] = docDir.getDoctorList().get(i).getPerson().getContactNo();
            System.out.println("This Docto ss: "+docDir.getDoctorList().get(i).getPerson().getContactNo());
        }

        for (Person per : pd.getPersonList()) {
            boolean a = true;
            for(long i : doc_cnum){
                if(i == per.getContactNo()){
                    System.out.print("This Person is a doctor");
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];

                row[0] = per.getName();
                row[1] = per.getContactNo();
                row[2] = per.getDob();
                row[3] = per.getComm();
                model12.addRow(row);
                a = true;
            }
        }

        DefaultTableModel model11 = (DefaultTableModel) doctor_table.getModel();
        model11.setRowCount(0);

        for(Doctor dr: docDir.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = dr.getId();
            row[1] = dr.getPerson().getContactNo();
            row[2] = dr.getPerson().getName();
            row[3] = dr.getPerson().getDob();
            row[4] = community.getCommName();
            model11.addRow(row);
        }

    }//GEN-LAST:event_populatetablesActionPerformed
    
    public void populateVitalTable(){
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        model.setRowCount(0);
        for(Encounter e: selectedPat.getPatientEncounterHistory()){
            Object[] row = new Object[5];
            row[0] = e.getId();
            row[1] = e.getLastVisitDate();
            row[2] = e.getVital().getBloodPressure();
            row[3] = e.getVital().getHeartRate();
            row[4] = e.getVital().getWeight();
            model.addRow(row);
        }
    }
    
    private void showPersonTable(){
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        DefaultTableModel model1 = (DefaultTableModel) persontable2.getModel();
        model.setRowCount(0);
        model1.setRowCount(0);

        for (Person person : pd.getPersonList()) {
            Object[] row = new Object[5];
            
            row[0] = person;
            row[1] = person.getAge();
            row[2] = person.getDob();
            row[3] = person.getContactNo();
            row[4] = person.getComm();
            model.addRow(row);
            model1.addRow(row);

        }
    }
    
    private void showCityTable(){
        DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        modelcity.setRowCount(0);

        for (City city : sys.getCityList()) {
            Object[] row = new Object[1];
            row[0] = city;
            modelcity.addRow(row);
        }
    }
    
    private void showCommunityTable(){
        DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
        modelcommunity.setRowCount(0);

        for (City city : sys.getCityList()) {
            for(Community comm: city.getCommList()){
            Object[] row = new Object[2];
            row[0] = city;
            row[1] = comm.getCommName();
            modelcommunity.addRow(row);
        }
     }
    }
    
    private void showPatientTable(){
        DefaultTableModel modelpatient = (DefaultTableModel) patienttable.getModel();
        modelpatient.setRowCount(0);
        
        for(Patient p: patDir.getPatientList()){
            Object[] row= new Object[3];
            row[0]= p.getId();
            row[1]= p.getPerson().getName();
            row[2]= p.getPerson().getAge();
            modelpatient.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_doctorBtn;
    private javax.swing.JButton add_vitals_button;
    private javax.swing.JComboBox<String> addcommunityComboBox;
    private javax.swing.JButton addpatientbtn;
    private javax.swing.JButton addpersontohousebtn;
    private javax.swing.JTextField blood_pressure;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JComboBox<String> cityComboBox1;
    private javax.swing.JTable citytable;
    private javax.swing.JComboBox<String> communityComboBox;
    private javax.swing.JComboBox<String> communityComboBox1;
    private javax.swing.JTable communitytable;
    private javax.swing.JButton createCityBtn;
    private javax.swing.JButton createCommunityBtn;
    private javax.swing.JButton createPersonBtn;
    private javax.swing.JButton deleteCityBtn;
    private javax.swing.JButton deleteCommunityBtn;
    private javax.swing.JButton deleteEncounter;
    private javax.swing.JButton deletePersonBtn;
    private javax.swing.JButton deletepatientbtn;
    private javax.swing.JTextField doctor_birthdate;
    private javax.swing.JTextField doctor_cellno;
    private javax.swing.JTextField doctor_name;
    private javax.swing.JTable doctor_table;
    private javax.swing.JTable encounter_table;
    private javax.swing.JTextField heart_rate;
    private javax.swing.JComboBox<String> hopital_list;
    private javax.swing.JComboBox<String> houselistComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel landingPanel;
    private javax.swing.JPanel manageCity;
    private javax.swing.JButton manageCitybtn;
    private javax.swing.JButton manageDoctorbtn;
    private javax.swing.JPanel manageDoctorsPanel;
    private javax.swing.JButton manageEnc;
    private javax.swing.JPanel manageEncounter;
    private javax.swing.JButton manageHospitalbtn;
    private javax.swing.JPanel managePatient;
    private javax.swing.JButton managePatientbtn;
    private javax.swing.JPanel managePerson;
    private javax.swing.JButton managePersonbtn;
    private javax.swing.JComboBox<String> newcommunityComboBox;
    private javax.swing.JComboBox<String> patient_dropbox;
    private javax.swing.JTextField patientagetextfield;
    private javax.swing.JTextField patientidtextfield;
    private javax.swing.JTextField patientnametextfield;
    private javax.swing.JTable patienttable;
    private javax.swing.JTextField personAge;
    private javax.swing.JTextField personAge1;
    private javax.swing.JTextField personContactNo;
    private javax.swing.JTextField personContactNo1;
    private javax.swing.JTextField personDate;
    private javax.swing.JTextField personDate1;
    private javax.swing.JTextField personName;
    private javax.swing.JTextField personName1;
    private javax.swing.JTable person_dir_table;
    private javax.swing.JTable person_directory_table;
    private javax.swing.JTable persontable;
    private javax.swing.JTable persontable1;
    private javax.swing.JTable persontable2;
    private javax.swing.JButton populatetables;
    private javax.swing.JButton save_updateddoctor;
    private javax.swing.JButton searchEncounter;
    private javax.swing.JButton search_comm_btn;
    private javax.swing.JButton search_comm_btn1;
    private javax.swing.JTextArea symptoms_ui;
    private javax.swing.JButton updateCityBtn;
    private javax.swing.JButton updateCommunityBtn;
    private javax.swing.JButton updateEncounter;
    private javax.swing.JComboBox<String> updateFilter;
    private javax.swing.JButton updatePersonBtn;
    private javax.swing.JTextField updateText;
    private javax.swing.JButton updatepatientbtn;
    private javax.swing.JButton viewCityBtn;
    private javax.swing.JButton viewCommunityBtn;
    private javax.swing.JButton viewPersonBtn;
    private javax.swing.JTable view_encounter;
    private javax.swing.JButton view_encounter_button;
    private javax.swing.JButton viewpatientbtn;
    private javax.swing.JTextField weight_ui;
    // End of variables declaration//GEN-END:variables
}
