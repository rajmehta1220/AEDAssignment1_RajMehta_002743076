/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.*;
import parser.Parser;

/**
 *
 * @author rajmehta
 */
public class SystemAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminPanel
     */
    City city;
    String[] communityList;
    String[] communityDropboxList;
    PatientDirectory patDir;
    Hospital newHospital;
    HospitalDirectory hospDir;
    EncounterHistory encounterDir;
    PersonDirectory pd;
    DoctorDirectory docDir;
    MainSystem sys;
    Patient patient;
    Patient patient1;
    DefaultTableModel model_dr;
    DefaultTableModel model_dr1;
    ArrayList<Patient> patientList;
    ArrayList<Patient> patList;
    Patient selectedPat;
    VitalSigns selectedPatVitalSigns;
    Encounter enc;
    DefaultTableModel model_hos;
    DefaultTableModel model;
    String selectedCommunity;
    Community community;
    Hospital hospital, hosp_dupl;
    HospitalDirectory hospitalDirectory;
    Person selectedPerson;
    Hospital selectedHospital;
    Parser parser = new Parser();
    MainSystem system;
    Community create_hosp;
    City create_hosp_comm;
    Doctor update_doc_obj, to_del_doc;
    DefaultTableModel model12;
    DefaultTableModel model11;
    Hospital to_delete;
    Community comm_delHosp;
    float bloodPressure;
    float heartRate;
    float weight;
    City city_delcomm;
    Community comm_del;

    
    public SystemAdminPanel(MainSystem system,City city, String[] communityDropboxList, PatientDirectory patDir, HospitalDirectory hospDir,PersonDirectory pd, DoctorDirectory docDir) {
        initComponents();
        this.city = city;
        this.communityDropboxList = communityDropboxList;
        this.pd=pd;
        this.docDir=docDir;
        this.sys = system;
        this.patDir = patDir;
        this.hospitalDirectory = hospDir;
        this.system = system;
        this.hospDir = hospDir;
       
        patientList = patDir.getPatientList();
        this.docDir = docDir;
        
        showPersonTable();
        showCityTable();
        showCommunityTable();
        showPatientTable();
        
        
        for(Community commList:city.getCommList()){
            for(House hosList: commList.getHouseList()){
                houselistComboBox.addItem(String.valueOf(hosList.getHouseNum()));
            }
        }
        
        community_dropbox.removeAllItems();
        for(Community c: city.getCommList()){
            community_dropbox.addItem(c.getCommName());
        }
        
//        for(House h: community.getHouseList()){
        model_dr = (DefaultTableModel) person_dir_table.getModel();
        model_dr.setRowCount(0);
        
        model_dr1 = (DefaultTableModel) person_directory_table.getModel();
        model_dr1.setRowCount(0);
        
        model = (DefaultTableModel) hospital_table.getModel();
        
        for(Patient p:patientList){
            Object[] row= new Object[3];
            row[0]= p.getId();
            row[1]= p.getPerson().getName();
            row[2]= p.getPerson().getAge();
            model_dr.addRow(row);
            model_dr1.addRow(row);
        }
        
        patient_dropbox.removeAllItems();
        for(Patient p: patDir.getPatientList()){
            patient_dropbox.addItem(String.valueOf(p.getId()));
        }
        
        
        ArrayList<Integer> aa = new ArrayList<Integer>();
            
    for(Community c: city.getCommList()){
        for(Hospital h: c.getHospitalList()){
            aa.add(h.getHospNum());
        }      
    }
            
    hopital_list.removeAllItems();
      
    for(int s:aa){
       hopital_list.addItem(String.valueOf(s));
        }
    
        model = (DefaultTableModel) hospital_table1.getModel();
        hospital_landingPage.setVisible(true);
        
        populateHospTable1();
        
        cityJTextField.removeAllItems();
        for(City c:system.getCityList()){
            cityJTextField.addItem(c.getCitName());
        }
        
        hopital_list1.removeAllItems();
        for(Hospital h : hospDir.getHospitalList()){
            hopital_list1.addItem(String.valueOf(h.getHospNum()));
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        landingPanel = new javax.swing.JPanel();
        managePersonbtn = new javax.swing.JButton();
        managePatientbtn = new javax.swing.JButton();
        manageDoctorbtn = new javax.swing.JButton();
        manageHospitalbtn = new javax.swing.JButton();
        manageCitybtn = new javax.swing.JButton();
        manageEnc = new javax.swing.JButton();
        managePerson = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        persontable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        personName = new javax.swing.JTextField();
        personAge = new javax.swing.JTextField();
        personDate = new javax.swing.JTextField();
        personContactNo = new javax.swing.JTextField();
        communityComboBox = new javax.swing.JComboBox<>();
        createPersonBtn = new javax.swing.JButton();
        personAge1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        viewPersonBtn = new javax.swing.JButton();
        communityComboBox1 = new javax.swing.JComboBox<>();
        personContactNo1 = new javax.swing.JTextField();
        personDate1 = new javax.swing.JTextField();
        personName1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deletePersonBtn = new javax.swing.JButton();
        updatePersonBtn = new javax.swing.JButton();
        addpersontohousebtn = new javax.swing.JButton();
        houselistComboBox = new javax.swing.JComboBox<>();
        manageCity = new javax.swing.JPanel();
        createCityBtn = new javax.swing.JButton();
        cityComboBox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        deleteCityBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        citytable = new javax.swing.JTable();
        cityComboBox1 = new javax.swing.JComboBox<>();
        viewCityBtn = new javax.swing.JButton();
        updateCityBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        communitytable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        addcommunityComboBox = new javax.swing.JComboBox<>();
        createCommunityBtn = new javax.swing.JButton();
        newcommunityComboBox = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        viewCommunityBtn = new javax.swing.JButton();
        deleteCommunityBtn = new javax.swing.JButton();
        updateCommunityBtn = new javax.swing.JButton();
        managePatient = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        patienttable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        persontable2 = new javax.swing.JTable();
        addpatientbtn = new javax.swing.JButton();
        deletepatientbtn = new javax.swing.JButton();
        viewpatientbtn = new javax.swing.JButton();
        updatepatientbtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        patientidtextfield = new javax.swing.JTextField();
        patientnametextfield = new javax.swing.JTextField();
        patientagetextfield = new javax.swing.JTextField();
        manageEncounter = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        person_dir_table = new javax.swing.JTable();
        add_vitals_button = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        blood_pressure = new javax.swing.JTextField();
        heart_rate = new javax.swing.JTextField();
        weight_ui = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        symptoms_ui = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        person_directory_table = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        view_encounter = new javax.swing.JTable();
        view_encounter_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        patient_dropbox = new javax.swing.JComboBox<>();
        searchEncounter = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        encounter_table = new javax.swing.JTable();
        updateEncounter = new javax.swing.JButton();
        deleteEncounter = new javax.swing.JButton();
        updateFilter = new javax.swing.JComboBox<>();
        updateText = new javax.swing.JTextField();
        manageDoctors = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        doctor_table = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        doctor_name = new javax.swing.JTextField();
        doctor_cellno = new javax.swing.JTextField();
        doctor_birthdate = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        persontable1 = new javax.swing.JTable();
        save_updateddoctor = new javax.swing.JButton();
        add_doctorBtn = new javax.swing.JButton();
        populatetables = new javax.swing.JButton();
        hopital_list = new javax.swing.JComboBox<>();
        jScrollPane13 = new javax.swing.JScrollPane();
        hospital_table = new javax.swing.JTable();
        community_dropbox = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        search_comm1_btn = new javax.swing.JButton();
        hospital_dropbox = new javax.swing.JComboBox<>();
        update_hospital = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        delDrBtn = new javax.swing.JButton();
        hospAdmin = new javax.swing.JPanel();
        hospital_landingPage = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        hospital_table1 = new javax.swing.JTable();
        create_hospital_btn = new javax.swing.JButton();
        hospital_dropbox1 = new javax.swing.JComboBox<>();
        update_hospital1 = new javax.swing.JTextField();
        update_hospital_btn = new javax.swing.JButton();
        manageDoctorsButton = new javax.swing.JButton();
        delete_hosp_btn = new javax.swing.JButton();
        hospitalJPanel = new javax.swing.JPanel();
        zipcodeTextField = new javax.swing.JTextField();
        streetName = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        hospNum = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        saveHospDetails = new javax.swing.JButton();
        communityTextField = new javax.swing.JComboBox<>();
        cityJTextField = new javax.swing.JComboBox<>();
        selectCity = new javax.swing.JButton();
        manageDoctorsPanel = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        doctor_table1 = new javax.swing.JTable();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        doctor_name1 = new javax.swing.JTextField();
        doctor_cellno1 = new javax.swing.JTextField();
        doctor_birthdate1 = new javax.swing.JTextField();
        jScrollPane16 = new javax.swing.JScrollPane();
        persontable3 = new javax.swing.JTable();
        save_updateddoctor1 = new javax.swing.JButton();
        add_doctorBtn1 = new javax.swing.JButton();
        populatetables1 = new javax.swing.JButton();
        hopital_list1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        landingPanel.setBackground(new java.awt.Color(0, 118, 82));

        managePersonbtn.setBackground(new java.awt.Color(10, 77, 55));
        managePersonbtn.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        managePersonbtn.setForeground(new java.awt.Color(255, 255, 255));
        managePersonbtn.setText("Manage Person");
        managePersonbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePersonbtnActionPerformed(evt);
            }
        });

        managePatientbtn.setBackground(new java.awt.Color(10, 77, 55));
        managePatientbtn.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        managePatientbtn.setForeground(new java.awt.Color(255, 255, 255));
        managePatientbtn.setText("Manage Patient");
        managePatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePatientbtnActionPerformed(evt);
            }
        });

        manageDoctorbtn.setBackground(new java.awt.Color(10, 77, 55));
        manageDoctorbtn.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        manageDoctorbtn.setForeground(new java.awt.Color(255, 255, 255));
        manageDoctorbtn.setText("Manage Doctor");
        manageDoctorbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorbtnActionPerformed(evt);
            }
        });

        manageHospitalbtn.setBackground(new java.awt.Color(10, 77, 55));
        manageHospitalbtn.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        manageHospitalbtn.setForeground(new java.awt.Color(255, 255, 255));
        manageHospitalbtn.setText("Manage Hospital");
        manageHospitalbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHospitalbtnActionPerformed(evt);
            }
        });

        manageCitybtn.setBackground(new java.awt.Color(10, 77, 55));
        manageCitybtn.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        manageCitybtn.setForeground(new java.awt.Color(255, 255, 255));
        manageCitybtn.setText("Manage City/Community");
        manageCitybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCitybtnActionPerformed(evt);
            }
        });

        manageEnc.setBackground(new java.awt.Color(10, 77, 55));
        manageEnc.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        manageEnc.setForeground(new java.awt.Color(255, 255, 255));
        manageEnc.setText("Manage Encounters");
        manageEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout landingPanelLayout = new javax.swing.GroupLayout(landingPanel);
        landingPanel.setLayout(landingPanelLayout);
        landingPanelLayout.setHorizontalGroup(
            landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(landingPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageDoctorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePersonbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageCitybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 497, Short.MAX_VALUE)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(manageEnc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageHospitalbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(managePatientbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                .addGap(133, 133, 133))
        );
        landingPanelLayout.setVerticalGroup(
            landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(landingPanelLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managePersonbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageDoctorbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageHospitalbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(landingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageCitybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageEnc, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        add(landingPanel, "card2");

        managePerson.setBackground(new java.awt.Color(0, 118, 82));

        persontable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Dob", "Contact No", "Community"
            }
        ));
        jScrollPane1.setViewportView(persontable);
        if (persontable.getColumnModel().getColumnCount() > 0) {
            persontable.getColumnModel().getColumn(1).setResizable(false);
            persontable.getColumnModel().getColumn(1).setHeaderValue("Age");
            persontable.getColumnModel().getColumn(2).setHeaderValue("Dob");
            persontable.getColumnModel().getColumn(3).setHeaderValue("Contact No");
            persontable.getColumnModel().getColumn(4).setHeaderValue("Community");
        }

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Age");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DOB");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Community");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Contact No");

        communityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Suffolk", "Sapphire" }));

        createPersonBtn.setText("Create Person");
        createPersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPersonBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Community");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("DOB");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Age");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Name");

        viewPersonBtn.setText("View");
        viewPersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPersonBtnActionPerformed(evt);
            }
        });

        communityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Suffolk", "Sapphire" }));

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Contact No");

        deletePersonBtn.setText("Delete");
        deletePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonBtnActionPerformed(evt);
            }
        });

        updatePersonBtn.setText("Update");
        updatePersonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonBtnActionPerformed(evt);
            }
        });

        addpersontohousebtn.setText("Add Person to House");
        addpersontohousebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpersontohousebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managePersonLayout = new javax.swing.GroupLayout(managePerson);
        managePerson.setLayout(managePersonLayout);
        managePersonLayout.setHorizontalGroup(
            managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(managePersonLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personAge, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(communityComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(personName1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(personContactNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(communityComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addComponent(viewPersonBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deletePersonBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updatePersonBtn)))
                .addGap(37, 37, 37))
            .addGroup(managePersonLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(houselistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(addpersontohousebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(780, Short.MAX_VALUE))
        );
        managePersonLayout.setVerticalGroup(
            managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personAge, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(communityComboBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(managePersonLayout.createSequentialGroup()
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personName1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personAge1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personContactNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(communityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewPersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletePersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updatePersonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44)
                .addGroup(managePersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(houselistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addpersontohousebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        add(managePerson, "card3");

        manageCity.setBackground(new java.awt.Color(0, 118, 82));

        createCityBtn.setText("Add City");
        createCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCityBtnActionPerformed(evt);
            }
        });

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Cambridge", "Worchester" }));

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("City");

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("City");

        deleteCityBtn.setText("Delete");
        deleteCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityBtnActionPerformed(evt);
            }
        });

        citytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "City Name"
            }
        ));
        jScrollPane2.setViewportView(citytable);

        cityComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Cambridge", "Worchester", " " }));

        viewCityBtn.setText("View");
        viewCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCityBtnActionPerformed(evt);
            }
        });

        updateCityBtn.setText("Update");
        updateCityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityBtnActionPerformed(evt);
            }
        });

        communitytable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "City Name", "Community Name"
            }
        ));
        jScrollPane3.setViewportView(communitytable);

        jLabel16.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Community");

        addcommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Hampshire", "Suffolk", "Franklin" }));

        createCommunityBtn.setText("Add Community");
        createCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCommunityBtnActionPerformed(evt);
            }
        });

        newcommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Hampshire", "Suffolk", "Franklin" }));

        jLabel17.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Community");

        viewCommunityBtn.setText("View");
        viewCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCommunityBtnActionPerformed(evt);
            }
        });

        deleteCommunityBtn.setText("Delete");
        deleteCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityBtnActionPerformed(evt);
            }
        });

        updateCommunityBtn.setText("Update");
        updateCommunityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCityLayout = new javax.swing.GroupLayout(manageCity);
        manageCity.setLayout(manageCityLayout);
        manageCityLayout.setHorizontalGroup(
            manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityLayout.createSequentialGroup()
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageCityLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(viewCityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteCityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateCityBtn))
                            .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(manageCityLayout.createSequentialGroup()
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39)
                                    .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(createCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(224, 224, 224)
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageCityLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(newcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addComponent(viewCommunityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteCommunityBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateCommunityBtn))
                            .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(manageCityLayout.createSequentialGroup()
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39)
                                    .addComponent(addcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(createCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(43, 43, 43))
        );
        manageCityLayout.setVerticalGroup(
            manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateCityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageCityLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(manageCityLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newcommunityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageCityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateCommunityBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        add(manageCity, "card4");

        managePatient.setBackground(new java.awt.Color(0, 118, 82));

        patienttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Patient Age"
            }
        ));
        jScrollPane4.setViewportView(patienttable);

        persontable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Dob", "Contact No", "Community"
            }
        ));
        jScrollPane5.setViewportView(persontable2);
        if (persontable2.getColumnModel().getColumnCount() > 0) {
            persontable2.getColumnModel().getColumn(1).setResizable(false);
            persontable2.getColumnModel().getColumn(1).setHeaderValue("Age");
            persontable2.getColumnModel().getColumn(2).setHeaderValue("Dob");
            persontable2.getColumnModel().getColumn(3).setHeaderValue("Contact No");
            persontable2.getColumnModel().getColumn(4).setHeaderValue("Community");
        }

        addpatientbtn.setText("Add Patient");
        addpatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addpatientbtnActionPerformed(evt);
            }
        });

        deletepatientbtn.setText("Delete Patient");
        deletepatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletepatientbtnActionPerformed(evt);
            }
        });

        viewpatientbtn.setText("View Patient");
        viewpatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewpatientbtnActionPerformed(evt);
            }
        });

        updatepatientbtn.setText("Update Patient");
        updatepatientbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatepatientbtnActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Patient Id:");

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Patient Name:");

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Patient Age:");

        patientidtextfield.setEditable(false);

        javax.swing.GroupLayout managePatientLayout = new javax.swing.GroupLayout(managePatient);
        managePatient.setLayout(managePatientLayout);
        managePatientLayout.setHorizontalGroup(
            managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePatientLayout.createSequentialGroup()
                        .addComponent(addpatientbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletepatientbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(33, 33, 33)
                        .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientagetextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientnametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientidtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(managePatientLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        managePatientLayout.setVerticalGroup(
            managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deletepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewpatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatepatientbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(patientidtextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(patientnametextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(managePatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(patientagetextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(94, 94, 94))
        );

        add(managePatient, "card5");

        manageEncounter.setBackground(new java.awt.Color(0, 118, 82));

        jLabel18.setFont(new java.awt.Font("Zapfino", 0, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Diagnose and Leave encounter record based on vital signs");

        jPanel2.setBackground(new java.awt.Color(10, 77, 55));

        person_dir_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Patient Age"
            }
        ));
        jScrollPane6.setViewportView(person_dir_table);

        add_vitals_button.setText("Add Vitals");
        add_vitals_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_vitals_buttonActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Blood Pressure:");

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Heart Rate:");

        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Weight:");

        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Symptoms:");

        symptoms_ui.setColumns(20);
        symptoms_ui.setRows(5);
        jScrollPane7.setViewportView(symptoms_ui);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(66, 66, 66)
                                .addComponent(weight_ui, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel20))
                                .addGap(12, 12, 12)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(blood_pressure)
                                    .addComponent(heart_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)
                        .addComponent(add_vitals_button, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 114, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(blood_pressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(heart_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel21)
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(weight_ui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add_vitals_button)
                        .addGap(21, 21, 21)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Add Encounters", jPanel2);

        jPanel3.setBackground(new java.awt.Color(10, 77, 55));

        person_directory_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane8.setViewportView(person_directory_table);

        view_encounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(view_encounter);

        view_encounter_button.setText("View Encounters");
        view_encounter_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_encounter_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 70, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(view_encounter_button)
                .addGap(283, 283, 283))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(view_encounter_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("View Encounters", jPanel3);

        jPanel1.setBackground(new java.awt.Color(10, 77, 55));

        jLabel23.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Select Patient ID:");

        patient_dropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchEncounter.setText("Search");
        searchEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEncounterActionPerformed(evt);
            }
        });

        encounter_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Eid", "VisitDate", "BloodPressure", "HeartRate", "Weight", "Symptoms"
            }
        ));
        jScrollPane10.setViewportView(encounter_table);

        updateEncounter.setText("Update");
        updateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEncounterActionPerformed(evt);
            }
        });

        deleteEncounter.setText("Delete");
        deleteEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEncounterActionPerformed(evt);
            }
        });

        updateFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BloodPressure", "HeartRate", "Weight", "Symptoms" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(updateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(updateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateText, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patient_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchEncounter)))
                .addGap(85, 85, 85))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(patient_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchEncounter))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateEncounter)
                    .addComponent(deleteEncounter)
                    .addComponent(updateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Update/Delete Encounter", jPanel1);

        javax.swing.GroupLayout manageEncounterLayout = new javax.swing.GroupLayout(manageEncounter);
        manageEncounter.setLayout(manageEncounterLayout);
        manageEncounterLayout.setHorizontalGroup(
            manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        manageEncounterLayout.setVerticalGroup(
            manageEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGap(32, 32, 32)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        add(manageEncounter, "card6");

        manageDoctors.setBackground(new java.awt.Color(0, 118, 82));

        doctor_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Id", "Contact No", "Doctor Name", "Age", "Community"
            }
        ));
        jScrollPane11.setViewportView(doctor_table);

        jLabel25.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Name:");

        jLabel26.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Contact No:");

        jLabel27.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("BirthDate:");

        doctor_cellno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctor_cellnoActionPerformed(evt);
            }
        });

        persontable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Contact No", "BirthDate", "Community"
            }
        ));
        jScrollPane12.setViewportView(persontable1);

        save_updateddoctor.setText("Save");
        save_updateddoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_updateddoctorActionPerformed(evt);
            }
        });

        add_doctorBtn.setText("Add Doctor");
        add_doctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_doctorBtnActionPerformed(evt);
            }
        });

        populatetables.setText("Populate Tables");
        populatetables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populatetablesActionPerformed(evt);
            }
        });

        hopital_list.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        hospital_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Num", "stName", "City", "Zip", "No of Doc"
            }
        ));
        jScrollPane13.setViewportView(hospital_table);

        community_dropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel28.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Community:");

        search_comm1_btn.setText("Search");
        search_comm1_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_comm1_btnActionPerformed(evt);
            }
        });

        hospital_dropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "streetName", "zipCode" }));

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("view");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        delDrBtn.setText("Delete");
        delDrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delDrBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDoctorsLayout = new javax.swing.GroupLayout(manageDoctors);
        manageDoctors.setLayout(manageDoctorsLayout);
        manageDoctorsLayout.setHorizontalGroup(
            manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsLayout.createSequentialGroup()
                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(manageDoctorsLayout.createSequentialGroup()
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hospital_dropbox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(update_hospital)
                                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageDoctorsLayout.createSequentialGroup()
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                                        .addComponent(add_doctorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(populatetables, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(hopital_list, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(manageDoctorsLayout.createSequentialGroup()
                                                .addGap(520, 520, 520)
                                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(doctor_birthdate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(doctor_cellno, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                                        .addGap(465, 465, 465)
                                        .addComponent(delDrBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(save_updateddoctor))))))
                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addComponent(community_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search_comm1_btn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageDoctorsLayout.setVerticalGroup(
            manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(community_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(search_comm1_btn))
                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(manageDoctorsLayout.createSequentialGroup()
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(doctor_cellno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel27)
                                    .addComponent(doctor_birthdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add_doctorBtn)
                            .addComponent(populatetables)
                            .addComponent(hopital_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(save_updateddoctor)
                            .addComponent(jButton4)
                            .addComponent(delDrBtn)))
                    .addGroup(manageDoctorsLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(hospital_dropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update_hospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(manageDoctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addGap(30, 30, 30))
        );

        add(manageDoctors, "card5");

        hospAdmin.setLayout(new java.awt.CardLayout());

        hospital_landingPage.setBackground(new java.awt.Color(0, 118, 82));

        hospital_table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hosp num", "StreetName", "City", "ZipCode"
            }
        ));
        jScrollPane14.setViewportView(hospital_table1);

        create_hospital_btn.setText("Create New Hospital");
        create_hospital_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_hospital_btnActionPerformed(evt);
            }
        });

        hospital_dropbox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "streetName", "zipCode" }));

        update_hospital_btn.setText("Update Hospital");
        update_hospital_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_hospital_btnActionPerformed(evt);
            }
        });

        manageDoctorsButton.setText("Manage Doctors");
        manageDoctorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorsButtonActionPerformed(evt);
            }
        });

        delete_hosp_btn.setText("Delete Hospital");
        delete_hosp_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_hosp_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hospital_landingPageLayout = new javax.swing.GroupLayout(hospital_landingPage);
        hospital_landingPage.setLayout(hospital_landingPageLayout);
        hospital_landingPageLayout.setHorizontalGroup(
            hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospital_landingPageLayout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addGroup(hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(update_hospital1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hospital_dropbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(update_hospital_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(create_hospital_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delete_hosp_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(hospital_landingPageLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospital_landingPageLayout.createSequentialGroup()
                        .addComponent(manageDoctorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(390, 390, 390))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospital_landingPageLayout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        hospital_landingPageLayout.setVerticalGroup(
            hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospital_landingPageLayout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospital_landingPageLayout.createSequentialGroup()
                        .addComponent(hospital_dropbox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update_hospital1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospital_landingPageLayout.createSequentialGroup()
                        .addGroup(hospital_landingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(update_hospital_btn)
                            .addComponent(create_hospital_btn)
                            .addComponent(delete_hosp_btn))
                        .addGap(124, 124, 124)))
                .addComponent(manageDoctorsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        hospAdmin.add(hospital_landingPage, "card2");

        hospitalJPanel.setBackground(new java.awt.Color(0, 118, 82));

        zipcodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipcodeTextFieldActionPerformed(evt);
            }
        });

        streetName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streetNameActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("StreetName");

        jLabel30.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Community");

        jLabel31.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("City");

        jLabel32.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Zipcode");

        hospNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospNumActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("HosNum");

        saveHospDetails.setText("Save");
        saveHospDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHospDetailsActionPerformed(evt);
            }
        });

        communityTextField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cityJTextField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        selectCity.setText("Select City");
        selectCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hospitalJPanelLayout = new javax.swing.GroupLayout(hospitalJPanel);
        hospitalJPanel.setLayout(hospitalJPanelLayout);
        hospitalJPanelLayout.setHorizontalGroup(
            hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hospitalJPanelLayout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hospitalJPanelLayout.createSequentialGroup()
                        .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hospNum)
                            .addComponent(zipcodeTextField)
                            .addComponent(streetName)
                            .addComponent(communityTextField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(selectCity))
                    .addGroup(hospitalJPanelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(saveHospDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        hospitalJPanelLayout.setVerticalGroup(
            hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hospitalJPanelLayout.createSequentialGroup()
                .addContainerGap(212, Short.MAX_VALUE)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(hospNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(streetName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(communityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(cityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCity))
                .addGap(27, 27, 27)
                .addGroup(hospitalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(zipcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(saveHospDetails)
                .addGap(174, 174, 174))
        );

        hospAdmin.add(hospitalJPanel, "card3");

        manageDoctorsPanel.setBackground(new java.awt.Color(0, 118, 82));

        doctor_table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Doctor Id", "Contact No", "Doctor Name", "DOB"
            }
        ));
        jScrollPane15.setViewportView(doctor_table1);

        jLabel34.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Update Doctor");

        jLabel35.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Name:");

        jLabel36.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Contact No:");

        jLabel37.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("BirthDate:");

        persontable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Contact No", "BirthDate", "Community"
            }
        ));
        jScrollPane16.setViewportView(persontable3);

        save_updateddoctor1.setText("Upate");
        save_updateddoctor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_updateddoctor1ActionPerformed(evt);
            }
        });

        add_doctorBtn1.setText("Add Doctor");
        add_doctorBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_doctorBtn1ActionPerformed(evt);
            }
        });

        populatetables1.setText("Populate Tables");
        populatetables1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populatetables1ActionPerformed(evt);
            }
        });

        hopital_list1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDoctorsPanelLayout = new javax.swing.GroupLayout(manageDoctorsPanel);
        manageDoctorsPanel.setLayout(manageDoctorsPanelLayout);
        manageDoctorsPanelLayout.setHorizontalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(doctor_name1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(doctor_cellno1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(doctor_birthdate1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(add_doctorBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(populatetables1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(hopital_list1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(save_updateddoctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        manageDoctorsPanelLayout.setVerticalGroup(
            manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(doctor_name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36)
                            .addComponent(doctor_cellno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel37)
                            .addComponent(doctor_birthdate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageDoctorsPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(82, 82, 82)
                .addGroup(manageDoctorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_doctorBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(populatetables1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hopital_list1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save_updateddoctor1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        hospAdmin.add(manageDoctorsPanel, "card5");

        add(hospAdmin, "card8");
    }// </editor-fold>//GEN-END:initComponents

    private void managePersonbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePersonbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        managePerson.setVisible(true);
    }//GEN-LAST:event_managePersonbtnActionPerformed

    private void viewPersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view person info");
            return;
        }
        else{
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        personName1.setText(String.valueOf(personobj.getName()));
        personAge1.setText(String.valueOf(personobj.getAge()));
        personDate1.setText(parser.covertDateToString(personobj.getDob()));
        personContactNo1.setText(String.valueOf(personobj.getContactNo()));
        communityComboBox1.setSelectedItem(String.valueOf(personobj.getComm()));
        }
    }//GEN-LAST:event_viewPersonBtnActionPerformed

    private void deletePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete person info");
            return;
        }
        else{
            DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        pd.getPersonList().remove(personobj);
        showPersonTable();
        }
    }//GEN-LAST:event_deletePersonBtnActionPerformed

    private void updatePersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonBtnActionPerformed
        // TODO add your handling code here:
        Parser parser = new Parser();
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update info");
            return;
        }
        else{
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        Person personobj = (Person) model.getValueAt(selectedRowIndex, 0);
        personobj.setName(personName1.getText());
        if(parser.isInteger(personAge1.getText())){
            personobj.setAge(Integer.parseInt(personAge1.getText()));
        }
        else{JOptionPane.showMessageDialog(this, "Mismatched Types");}
        
        LocalDate date =parser.convertToDate(personDate1.getText());
        personobj.setDob(date);
        
        if(parser.isLong(personContactNo1.getText()) || parser.isInteger(personContactNo1.getText())){
            personobj.setContactNo(Long.parseLong(personContactNo1.getText()));
        }
        else{JOptionPane.showMessageDialog(this, "Mismatched Types");}
        
        personobj.setComm(communityComboBox1.getSelectedItem()+"");
        showPersonTable();
        }
    }//GEN-LAST:event_updatePersonBtnActionPerformed

    private void createCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCityBtnActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        for(City cityy: sys.getCityList()) {
            if(cityy.getCitName() == cityComboBox.getSelectedItem()){
                System.out.println(cityComboBox.getSelectedItem());
               flag=false;
            }
        }
        if(flag == false){
           JOptionPane.showMessageDialog(this, "City already Exists");
            return;
        }
        else{
        sys.addCity(String.valueOf(cityComboBox.getSelectedItem()));
        showCityTable();
        }
        
    }//GEN-LAST:event_createCityBtnActionPerformed

    private void deleteCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to delete");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        if (!cityobj.getCommList().isEmpty()){
            JOptionPane.showMessageDialog(this, "Cannot delete a city with communities");
        }
        else{
        sys.removeCity(cityobj);
        showCityTable();
        }
        }
        
    }//GEN-LAST:event_deleteCityBtnActionPerformed

    private void viewCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to view");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        cityComboBox1.setSelectedItem(cityobj.getCitName());
        }
    }//GEN-LAST:event_viewCityBtnActionPerformed

    private void updateCityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to update");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        cityobj.setCitName(String.valueOf(cityComboBox1.getSelectedItem()));
        showCityTable();
        }
    }//GEN-LAST:event_updateCityBtnActionPerformed

    private void manageCitybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCitybtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        manageCity.setVisible(true);
        
    }//GEN-LAST:event_manageCitybtnActionPerformed

    private void createCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = citytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city");
            return;
        }
        else{
            DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        City cityobj = (City) modelcity.getValueAt(selectedRowIndex, 0);
        Community newCom = new Community(String.valueOf(addcommunityComboBox.getSelectedItem()));
        cityobj.getCommList().add(newCom);
        showCommunityTable();
        }
        
        
        
    }//GEN-LAST:event_createCommunityBtnActionPerformed

    private void viewCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communitytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to view");
            return;
        }
        else{
        DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
        String commname = String.valueOf(modelcommunity.getValueAt(selectedRowIndex, 1));
        newcommunityComboBox.setSelectedItem(commname);
        }
        
    }//GEN-LAST:event_viewCommunityBtnActionPerformed

    private void deleteCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communitytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to delete");
            return;
        }
        else{
            
            DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
            String cityobj = String.valueOf( modelcommunity.getValueAt(selectedRowIndex, 0));
            String commobj = String.valueOf(modelcommunity.getValueAt(selectedRowIndex, 1));
            for(City c: sys.getCityList()){
                if(c.getCitName() == cityobj){
                    city_delcomm = c;
                    for(Community comm: c.getCommList()){
                        if(comm.getCommName() == commobj){
                            comm_del = comm;
                        }
                    }
                }
            }
           
           for(City c: sys.getCityList()){
               if(c.getCitName() == city_delcomm.getCitName()){
                   c.getCommList().remove(comm_del);
               }
           }
        showCommunityTable();  
      
        }
    }//GEN-LAST:event_deleteCommunityBtnActionPerformed

    private void updateCommunityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communitytable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to update");
            return;
        }
        else{
            DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
            String commname = String.valueOf(modelcommunity.getValueAt(selectedRowIndex, 1));
        
            for(City c: sys.getCityList()){
                for(Community com: c.getCommList()){
                    if(commname == com.getCommName()){
                        com.setCommName(String.valueOf(newcommunityComboBox.getSelectedItem()));
                    }
                }
            }
        }
        
        showCommunityTable();
    }//GEN-LAST:event_updateCommunityBtnActionPerformed

    private void managePatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePatientbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        managePatient.setVisible(true);
    }//GEN-LAST:event_managePatientbtnActionPerformed

    private void addpatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpatientbtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = persontable2.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) persontable2.getModel();
            Person personobj = (Person) modelpp.getValueAt(selectedRowIndex, 0);
            patDir.createPatient(personobj);
            showPatientTable();
        }
        
    }//GEN-LAST:event_addpatientbtnActionPerformed

    private void deletepatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletepatientbtnActionPerformed
        // TODO add your handling code here:
         int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
            patDir.getPatientList().remove(pp);
            showPatientTable();
            JOptionPane.showMessageDialog(this, "Patient Successfully deleted");
            return;
                }
        }
        }
    }//GEN-LAST:event_deletepatientbtnActionPerformed

    private void viewpatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewpatientbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
                    patientidtextfield.setText(String.valueOf(pp.getId()));
                    patientnametextfield.setText(pp.getPerson().getName());
                    patientagetextfield.setText(String.valueOf(pp.getPerson().getAge()));
                }
        }
        }
        
    }//GEN-LAST:event_viewpatientbtnActionPerformed

    private void updatepatientbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatepatientbtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patienttable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelpp = (DefaultTableModel) patienttable.getModel();
            String patid = String.valueOf(modelpp.getValueAt(selectedRowIndex, 0));
            for(Patient pp: patDir.getPatientList()){
                if (pp.getId() == Long.parseLong(patid)){
                    pp.getPerson().setName(patientnametextfield.getText());
                    pp.getPerson().setAge(Integer.parseInt(patientagetextfield.getText()));
                    showPatientTable();
                }
        }
        }
    }//GEN-LAST:event_updatepatientbtnActionPerformed

    private void manageEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEncActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        manageEncounter.setVisible(true);
    }//GEN-LAST:event_manageEncActionPerformed

    private void add_vitals_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_vitals_buttonActionPerformed
        // TODO add your handling code here:
        
            if(person_dir_table.getSelectedRow()<0){
                JOptionPane.showMessageDialog(this, "Please select a Patient");
            }
            else{
                long patient_id_check= (long)model_dr.getValueAt(person_dir_table.getSelectedRow(), 0);
                System.out.println("Patient ID Check: "+patient_id_check);

                for(Patient i:patientList){
                    if(patient_id_check == i.getId()){
                        patient = i;
                    }
                }
                
                if(!parser.checkNull(blood_pressure.getText()) && !parser.isInteger(blood_pressure.getText())){
                    JOptionPane.showMessageDialog(this, "Type Mismached for BP");
                }
                else{
                    bloodPressure = Float.parseFloat(blood_pressure.getText());
                }
                
                if(!parser.checkNull(heart_rate.getText()) && !parser.isInteger(heart_rate.getText())){
                    JOptionPane.showMessageDialog(this, "Type Mismached for HR");
                }
                else{
                    heartRate = Float.parseFloat(heart_rate.getText());
                }
                
                if(!parser.checkNull(weight_ui.getText()) && !parser.isInteger(weight_ui.getText())){
                    JOptionPane.showMessageDialog(this, "Type Mismached for Weight");
                }
                else{
                    weight = Float.parseFloat(weight_ui.getText());
                }

                String symptoms = symptoms_ui.getText();

                patient.getEncounterHistory().addEncounter(new VitalSigns(bloodPressure, heartRate, weight, symptoms));
                JOptionPane.showMessageDialog(this, "Visit saved successfully!");

            }//end else

    }//GEN-LAST:event_add_vitals_buttonActionPerformed

    private void view_encounter_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_encounter_buttonActionPerformed
        // TODO add your handling code here:
        if(person_dir_table.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Patient");
        }
        else{

            DefaultTableModel model2 = (DefaultTableModel) view_encounter.getModel();
            model2.setRowCount(0);

            long patient_id_check= (long)model_dr1.getValueAt(person_directory_table.getSelectedRow(), 0);
            System.out.println("Patient ID Check: "+patient_id_check);

            for(Patient i:patientList){
                if(patient_id_check == i.getId()){
                    patient1 = i;
                }
            }

            ArrayList<Encounter> patient_encounter = patient1.getPatientEncounterHistory();
            for(Encounter e:patient_encounter){
                Object[] row = new Object[10];
                row[0] = e.getLastVisitDate();
                row[1] = e.getId();
                row[2]=e.getVital().getBloodPressure();
                model2.addRow(row);
            }

        }//end else
    }//GEN-LAST:event_view_encounter_buttonActionPerformed

    private void searchEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEncounterActionPerformed
        // TODO add your handling code here:
        if(patient_dropbox.getSelectedItem().toString() == " "){
            JOptionPane.showMessageDialog(this, "Please Select Patient ID");
        }
        else{
            boolean found = false;
            DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
            model.setRowCount(0);
            
            patList = patDir.getPatientList();
            for(int i=0; i<patList.size(); i++){
                System.out.println(patList.get(i).getPerson().getName());
                if(Integer.parseInt(patient_dropbox.getSelectedItem().toString()) == patList.get(i).getId()){
                    selectedPat = patList.get(i);
                    found = true;
                    for(Encounter e: selectedPat.getPatientEncounterHistory()){
                        Object[] row = new Object[5];
                        row[0] = e.getId();
                        row[1] = e.getLastVisitDate();
                        row[2] = e.getVital().getBloodPressure();
                        row[3] = e.getVital().getHeartRate();
                        row[4] = e.getVital().getWeight();
                        model.addRow(row);
                    }
                }
                
            }
            if(!found){
               JOptionPane.showMessageDialog(this, "Patient not found");
            }
        }
        
    }//GEN-LAST:event_searchEncounterActionPerformed

    private void updateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEncounterActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        
        if(encounter_table.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Hospital");
        }
        else{
            long eid_check= (long)model.getValueAt(encounter_table.getSelectedRow(), 0);
            String encupdate_str = updateText.getText();
            
            for(Encounter e: selectedPat.getPatientEncounterHistory()){
                if(e.getId() == eid_check){
                    selectedPatVitalSigns =e.getVital();
                }
            }

            String updateFilterCriteria = String.valueOf(updateFilter.getSelectedItem());
            if(updateFilterCriteria == " "){
                JOptionPane.showMessageDialog(this,"Select Valid Dropbox Item");
            }
            
            else{
                if(updateFilterCriteria == "BloodPressure"){
                    float new_bp = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setBloodPressure(new_bp);
                    populateVitalTable();
                }

                if(updateFilterCriteria == "HeartRate"){
                    float new_hr = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setHeartRate(new_hr);
                    populateVitalTable();
                }

                if(updateFilterCriteria == "Weight"){
                    float new_w = Float.parseFloat(updateText.getText());
                    selectedPatVitalSigns.setWeight(new_w);
                    populateVitalTable();
                }
            }
        }
        
    }//GEN-LAST:event_updateEncounterActionPerformed

    private void deleteEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEncounterActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        int selectedRowIndex = encounter_table.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        else{
            
            long eid_check= (long)model.getValueAt(encounter_table.getSelectedRow(), 0);
            for(Encounter e: selectedPat.getPatientEncounterHistory()){
                if(e.getId() == eid_check){
                    enc = e;
                }
            }
            
            selectedPat.getEncounterHistory().DeleteEncounter(enc);
            populateVitalTable();
        }
    }//GEN-LAST:event_deleteEncounterActionPerformed

    private void add_doctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_doctorBtnActionPerformed
        // TODO add your handling code here:
        System.out.println("Sel Row"+persontable1.getSelectedRow());
        if(persontable1.getSelectedRow() < 0){
            JOptionPane.showMessageDialog(this, "Please select a person to add");
        }
        if(hopital_list.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Please select a hospital to add doctor");
        }
        else
        {
            long ppn = (long)model12.getValueAt(persontable1.getSelectedRow(),1);
            for(Person p : pd.getPersonList()){
                if(ppn == p.getContactNo()){
                    selectedPerson = p;
                }
            }

            for(Hospital h : hospitalDirectory.getHospitalList()){
                if(Integer.parseInt((String)hopital_list.getSelectedItem()) == h.getHospNum()){
                    selectedHospital = h;
                }
            }

            boolean should_doc = false;
            for(Patient p: patDir.getPatientList()){
                if(p.matchByContact(selectedPerson.getContactNo())){
                    JOptionPane.showMessageDialog(this, "This Person is a Patient and cannot become Doctor");
                    should_doc = true;
                }
            }

            if(!should_doc){
                selectedHospital.addDoctorToHospital(new Doctor(selectedPerson));
                docDir.addDoctor(new Doctor(selectedPerson));
                
                
                JOptionPane.showMessageDialog(this, "Added "+selectedPerson.getName()+ " to Hospital");
                should_doc = false;
                
                
                model11 = (DefaultTableModel) doctor_table.getModel();
                model11.setRowCount(0);

                for(Doctor dr: docDir.getDoctorList()){
                    Object[] row = new Object[5];
                    row[0] = dr.getId();
                    row[1] = dr.getPerson().getContactNo();
                    row[2] = dr.getPerson().getName();
                    row[3] = dr.getPerson().getDob();
                    model11.addRow(row);
                    
                model.setRowCount(0);
                for(City c: sys.getCityList()){
                    for(Community comm: c.getCommList()){
                        for(Hospital h: comm.getHospitalList()){
                            Object[] row1 = new Object[5];
                            row1[0]= h.getHospNum();
                            row1[1]= h.getStreetName();
                            row1[2]= h.getCity();
                            row1[3]= h.getZipcode();
                            row1[4]= (h.getDoctorHospital()).size();
                            model.addRow(row1);
                        }
                    }
                }
                
                 
                }
            }
           

        }//end else

    }//GEN-LAST:event_add_doctorBtnActionPerformed

    private void populatetablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populatetablesActionPerformed
        // TODO add your handling code here:
        
        model12 = (DefaultTableModel) persontable1.getModel();
        model12.setRowCount(0);

        long[] doc_cnum = new long[docDir.getDoctorList().size()];

        for(int i=0; i<(docDir.getDoctorList()).size(); i++){
            doc_cnum[i] = docDir.getDoctorList().get(i).getPerson().getContactNo();
            System.out.println("This Docto ss: "+docDir.getDoctorList().get(i).getPerson().getContactNo());
        }

        for (Person per : pd.getPersonList()) {
            boolean a = true;
            for(long i : doc_cnum){
                if(i == per.getContactNo()){
                    System.out.print("This Person is a doctor");
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];

                row[0] = per.getName();
                row[1] = per.getContactNo();
                row[2] = per.getDob();
                row[3] = per.getComm();
                model12.addRow(row);
                a = true;
            }
        }

        DefaultTableModel model11 = (DefaultTableModel) doctor_table.getModel();
        model11.setRowCount(0);

        for(Doctor dr: docDir.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = dr.getId();
            row[1] = dr.getPerson().getContactNo();
            row[2] = dr.getPerson().getName();
            row[3] = dr.getPerson().getDob();
            row[4] = community.getCommName();
            model11.addRow(row);
        }

    }//GEN-LAST:event_populatetablesActionPerformed
    
    private void search_comm1_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_comm1_btnActionPerformed
        // TODO add your handling code here:
        selectedCommunity = String.valueOf(community_dropbox.getSelectedItem());
        model = (DefaultTableModel) hospital_table.getModel();
        model.setRowCount(0);
        for(Community c: city.getCommList()){
            if(selectedCommunity == c.getCommName())
            community = c;
        }

        model.setRowCount(0);
        for(Hospital h: community.getHospitalList()){
            Object[] row = new Object[5];
            row[0]= h.getHospNum();
            row[1]= h.getStreetName();
            row[2]= h.getCity();
            row[3]= h.getZipcode();
            row[4]= (h.getDoctorHospital()).size();
            model.addRow(row);
        }
     
        
    }//GEN-LAST:event_search_comm1_btnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(hospital_table.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Hospital");
        }
        else{
            int hospNum_check= (int)model.getValueAt(hospital_table.getSelectedRow(), 0);
            String hospupdate_str = update_hospital.getText();

            for(Hospital i:community.getHospitalList()){
                if(hospNum_check == i.getHospNum()){
                    hospital = i;
                }
            }

            String hospitalUpdateCriteria = String.valueOf(hospital_dropbox.getSelectedItem());
            if(hospitalUpdateCriteria == " "){
                JOptionPane.showMessageDialog(this,"Select Valid Dropbox Item");
            }
            else{
                if(hospitalUpdateCriteria == "hospNum"){
                    int new_hospNum = Integer.parseInt(hospupdate_str);
                    hospital.setHospNum(new_hospNum);
                    populateHospTable();
                }

                if(hospitalUpdateCriteria == "streetName"){
                    String new_streetName = hospupdate_str;
                    hospital.setStreetName(new_streetName);
                    populateHospTable();
                }

                if(hospitalUpdateCriteria == "zipCode"){
                    long new_zipCode = Long.parseLong(hospupdate_str);
                    hospital.setZipcode(new_zipCode);
                    populateHospTable();
                }

            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void manageDoctorbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        manageDoctors.setVisible(true);
    }//GEN-LAST:event_manageDoctorbtnActionPerformed

    private void create_hospital_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_hospital_btnActionPerformed
        // TODO add your handling code here:
        //        CreateNewHospital hospitalPane = new CreateNewHospital(hospital);
        //        splitPane.setRightPanel(hopitalPane);
        hospitalJPanel.setVisible(true);
        hospital_landingPage.setVisible(false);
    }//GEN-LAST:event_create_hospital_btnActionPerformed

    private void update_hospital_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_hospital_btnActionPerformed
        // TODO add your handling code here:

        if(hospital_table1.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a Hospital");
        }
        else{
            int hospNum_check= (int)model.getValueAt(hospital_table1.getSelectedRow(), 0);
            String hospupdate_str = update_hospital1.getText();
            for(City ci: sys.getCityList()){
                for(Community c: ci.getCommList()){
                    for(Hospital i: c.getHospitalList()){
                        if(hospNum_check == i.getHospNum()){
                            hospital = i;
                        }
                    }
                }
            }

            String hospitalUpdateCriteria = String.valueOf(hospital_dropbox1.getSelectedItem());
            if(hospitalUpdateCriteria == " "){
                JOptionPane.showMessageDialog(this,"Select Valid Dropbox Item");
            }
            else{
                if(hospitalUpdateCriteria == "hospNum"){
                    int new_hospNum = Integer.parseInt(hospupdate_str);
                    hospital.setHospNum(new_hospNum);
                    populateHospTable();
                }

                if(hospitalUpdateCriteria == "streetName"){
                    String new_streetName = hospupdate_str;
                    hospital.setStreetName(new_streetName);
                    populateHospTable();
                }

                if(hospitalUpdateCriteria == "zipCode"){
                    long new_zipCode = Long.parseLong(hospupdate_str);
                    hospital.setZipcode(new_zipCode);
                    populateHospTable1();
                }

            }
        }
    }//GEN-LAST:event_update_hospital_btnActionPerformed

    private void manageDoctorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorsButtonActionPerformed
        // TODO add your handling code here:
        manageDoctorsPanel.setVisible(true);
        hospital_landingPage.setVisible(false);
    }//GEN-LAST:event_manageDoctorsButtonActionPerformed

    private void zipcodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipcodeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zipcodeTextFieldActionPerformed

    private void streetNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streetNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_streetNameActionPerformed

    private void hospNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospNumActionPerformed

    private void saveHospDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHospDetailsActionPerformed
        // TODO add your handling code here:
        boolean true_hospNum = false;
        int HospNum1 = Integer.parseInt(hospNum.getText());

        for (Hospital h:hospDir.getHospitalList()){
            if(h.getHospNum() == HospNum1){
                JOptionPane.showMessageDialog(this,"This Hospital Already Exist");
                true_hospNum = true;
            }
        }

        if(!true_hospNum){
            String city1 = String.valueOf(cityJTextField.getSelectedItem());
            String streetName1 = streetName.getText();
            String community1 = String.valueOf(communityTextField.getSelectedItem());
            Long Zipcode1 =Long.parseLong(zipcodeTextField.getText());

            for(City c: system.getCityList()){
                if(c.getCitName() == city1){
                    for(Community comm: c.getCommList()){
                        if(comm.getCommName() == community1){
                            create_hosp = comm;
                        }
                    }
                }
            }

            hospDir.createHospital(HospNum1,streetName1,community1,city1);
            System.out.println("No of total Hospitals: "+(hospDir.getHospitalList()).size());
            create_hosp.createHospital(HospNum1,streetName1,community1,city1);
            populateHospTable1();
            JOptionPane.showMessageDialog(this,"New Hospital Created with Id: "+HospNum1);

            hospNum.setText("");
            streetName.setText("");
            zipcodeTextField.setText("");
        }
        //        Community cc = city.getCommList();
    }//GEN-LAST:event_saveHospDetailsActionPerformed

    private void selectCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCityActionPerformed
        // TODO add your handling code here:
        String city_fetch_comm = String.valueOf(cityJTextField.getSelectedItem());
        communityTextField.removeAllItems();

        for (City c: system.getCityList()){
            System.out.println("City is: "+city_fetch_comm);
            System.out.println("City DB is: "+c.getCitName());
            if(city_fetch_comm == c.getCitName()){
                for(Community comm: c.getCommList()){
                    System.out.println("Comm is: "+comm.getCommName());
                    communityTextField.addItem(comm.getCommName());
                }
            }
        }
    }//GEN-LAST:event_selectCityActionPerformed

    private void save_updateddoctor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_updateddoctor1ActionPerformed
        // TODO add your handling code here:
        String dname_table = doctor_name1.getText();
        long dno_table = Long.parseLong(doctor_cellno1.getText());
        LocalDate ddon_table = parser.convertToDate(doctor_birthdate1.getText());
        update_doc_obj.getPerson().setName(dname_table);
        update_doc_obj.getPerson().setContactNo(dno_table);
        update_doc_obj.getPerson().setDob(ddon_table);

        PopulateManageDoctorTable();
    }//GEN-LAST:event_save_updateddoctor1ActionPerformed

    private void add_doctorBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_doctorBtn1ActionPerformed
        // TODO add your handling code here:
        if(persontable3.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Please select a person to add");
        }
        if(hopital_list1.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Please select a hospital to add doctor");
        }
        else
        {
            long ppn = (long)model12.getValueAt(persontable3.getSelectedRow(),1);
            for(Person p : pd.getPersonList()){
                if(ppn == p.getContactNo()){
                    selectedPerson = p;
                }
            }

            for(Hospital h : hospDir.getHospitalList()){
                if(Integer.parseInt((String)hopital_list1.getSelectedItem()) == h.getHospNum()){
                    selectedHospital = h;
                }
            }

            boolean should_doc = false;
            for(Patient p: patDir.getPatientList()){
                if(p.matchByContact(selectedPerson.getContactNo())){
                    JOptionPane.showMessageDialog(this, "This Person is a Patient and cannot become Doctor");
                    should_doc = true;
                }
            }

            if(!should_doc){
                Doctor new_doc = new Doctor(selectedPerson);
                selectedHospital.addDoctorToHospital(new_doc);
                docDir.addDoctor(new_doc);
                
                for(City c: sys.getCityList()){
                    for(Community comm: c.getCommList()){
                        for(Hospital h: comm.getHospitalList()){
                            if(h == selectedHospital){
                                h.addDoctorToHospital(new_doc);
                                System.out.print("Added "+new_doc.getPerson().getName()+ " to "+h.getHospNum());
                            }
                        }
                    }
                }
                
                JOptionPane.showMessageDialog(this, "Added "+selectedPerson.getName()+ " to Hospital");
                populateHospTable1();
                should_doc = false;
                PopulateManageDoctorTable();
                
            }

        }//end else
    }//GEN-LAST:event_add_doctorBtn1ActionPerformed

    private void populatetables1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populatetables1ActionPerformed
        // TODO add your handling code here:
        model12 = (DefaultTableModel) persontable3.getModel();
        model12.setRowCount(0);

        long[] doc_cnum = new long[docDir.getDoctorList().size()];

        for(int i=0; i<(docDir.getDoctorList()).size(); i++){
            doc_cnum[i] = docDir.getDoctorList().get(i).getPerson().getContactNo();
            System.out.println("This Docto ss: "+docDir.getDoctorList().get(i).getPerson().getContactNo());
        }

        for (Person per : pd.getPersonList()) {
            boolean a = true;
            for(long i : doc_cnum){
                if(i == per.getContactNo()){
                    System.out.print("This Person is a doctor");
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];

                row[0] = per.getName();
                row[1] = per.getContactNo();
                row[2] = per.getDob();
                row[3] = per.getComm();
                model12.addRow(row);
                a = true;
            }
        }

        DefaultTableModel model11 = (DefaultTableModel) doctor_table1.getModel();
        model11.setRowCount(0);

        for(Doctor dr: docDir.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = dr.getId();
            row[1] = dr.getPerson().getContactNo();
            row[2] = dr.getPerson().getName();
            row[3] = dr.getPerson().getDob();
            model11.addRow(row);
        }
    }//GEN-LAST:event_populatetables1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        model11 = (DefaultTableModel) doctor_table1.getModel();

        if(doctor_table1.getSelectedRow()>=0){
            long did_table = (long)model11.getValueAt(doctor_table1.getSelectedRow(),0);

            for(Hospital h : hospDir.getHospitalList()){
                for(Doctor d: h.getDoctorHospital()){
                    if(did_table == d.getId()){
                        update_doc_obj = d;
                        doctor_name1.setText(d.getPerson().getName());
                        doctor_cellno1.setText(String.valueOf(d.getPerson().getContactNo()));
                        doctor_birthdate1.setText(parser.covertDateToString(d.getPerson().getDob()));
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void manageHospitalbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHospitalbtnActionPerformed
        // TODO add your handling code here:
        landingPanel.setVisible(false);
        hospAdmin.setVisible(true);
    }//GEN-LAST:event_manageHospitalbtnActionPerformed

    private void delete_hosp_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_hosp_btnActionPerformed
        // TODO add your handling code here:
        model11 = (DefaultTableModel) hospital_table1.getModel();
        boolean flagg = true;
        if(hospital_table1.getSelectedRow() >= 0){
            int hosp_num_del = (int)model11.getValueAt(hospital_table1.getSelectedRow(),0);
        
            for(Hospital h: hospDir.getHospitalList()){
                System.out.println("Delete Hos: "+h.getHospNum()+ " Size: "+(h.getDoctorHospital()).size()+" UI: "+hosp_num_del);
                if( (h.getHospNum() == hosp_num_del) && ( (h.getDoctorHospital()).size() == 0))
                {   
                    to_delete = h;
                    JOptionPane.showMessageDialog(this,"Deleted");
                    flagg = false;
                }
            }
            hospDir.getHospitalList().remove(to_delete);
            for(City c: system.getCityList()){
                for(Community comm: c.getCommList()){
                    for(Hospital hos: comm.getHospitalList()){
                        if(hos.getHospNum() == hosp_num_del){
                            comm_delHosp = comm;         
                        }
                    }
                }
            }
            comm_delHosp.getHospitalList().remove(to_delete);

            populateHospTable1();
        }
        else{
            JOptionPane.showMessageDialog(this,"Please Select a Hospital");
        }
        
        if(flagg == true){
            JOptionPane.showMessageDialog(this,"Cannot Delete Hospital with Patients");
        }
    }//GEN-LAST:event_delete_hosp_btnActionPerformed

    private void addpersontohousebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addpersontohousebtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = persontable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        else{
            DefaultTableModel modelperson = (DefaultTableModel) persontable.getModel();
            Person personobj = (Person) modelperson.getValueAt(selectedRowIndex, 0);
            for(City cityList: sys.getCityList()){
                for(Community commList:cityList.getCommList()){
                    for(House hosList: commList.getHouseList()){
                        if((hosList.getHouseNum()) == Integer.parseInt(houselistComboBox.getSelectedItem()+"")){
                            hosList.addPersonToHouse(personobj);
                            JOptionPane.showMessageDialog(this, "Person added to house");
                            return;
                        }

                    }

                }
            }
        }

    }//GEN-LAST:event_addpersontohousebtnActionPerformed

    private void createPersonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPersonBtnActionPerformed
        // TODO add your handling code here:
        Parser parser = new Parser();
        Person newPerson = new Person();
        newPerson.setName(personName.getText());
        if(parser.isInteger(personAge.getText())){
            newPerson.setAge(Integer.parseInt(personAge.getText()));
        }
        else{JOptionPane.showMessageDialog(this, "Type Mismached");}
        LocalDate date =parser.convertToDate(personDate.getText());
        newPerson.setDob(date);
        
        if(parser.isLong(personContactNo.getText()) || parser.isInteger(personContactNo.getText())){
            newPerson.setContactNo(Long.parseLong(personContactNo.getText()));
        }
        else{JOptionPane.showMessageDialog(this, "Type Mismached");}
        
        newPerson.setComm(communityComboBox.getSelectedItem()+"");
        pd.addPersonToDirectory(newPerson);
        showPersonTable();

    }//GEN-LAST:event_createPersonBtnActionPerformed

    private void save_updateddoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_updateddoctorActionPerformed
        // TODO add your handling code here:
        long dno_table = 2345634;
        String dname_table = String.valueOf(doctor_name.getText());
        if(parser.isLong(doctor_cellno.getText()) || parser.isInteger(doctor_cellno.getText())){
            dno_table = Long.parseLong(doctor_cellno.getText());
        }
        else{ JOptionPane.showMessageDialog(this, "Type Mismached"); }
        
        LocalDate ddon_table = parser.convertToDate(doctor_birthdate.getText());
        update_doc_obj.getPerson().setName(dname_table);
        update_doc_obj.getPerson().setContactNo(dno_table);
        update_doc_obj.getPerson().setDob(ddon_table);
        
        DefaultTableModel model11 = (DefaultTableModel) doctor_table.getModel();
        model11.setRowCount(0);

        for(Doctor dr: docDir.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = dr.getId();
            row[1] = dr.getPerson().getContactNo();
            row[2] = dr.getPerson().getName();
            row[3] = dr.getPerson().getDob();
            row[4] = community.getCommName();
            model11.addRow(row);
        }
    }//GEN-LAST:event_save_updateddoctorActionPerformed

    private void doctor_cellnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctor_cellnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctor_cellnoActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        model11 = (DefaultTableModel) doctor_table.getModel();
        
        if(doctor_table.getSelectedRow()>=0){
            long did_table = (long)model11.getValueAt(doctor_table.getSelectedRow(),0);
            
            for(Hospital h : hospDir.getHospitalList()){
                for(Doctor d: h.getDoctorHospital()){
                    if(did_table == d.getId()){
                        update_doc_obj = d;
                        doctor_name.setText(d.getPerson().getName());
                        doctor_cellno.setText(String.valueOf(d.getPerson().getContactNo()));
                        doctor_birthdate.setText(parser.covertDateToString(d.getPerson().getDob()));
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        model11 = (DefaultTableModel) hospital_table.getModel();
        boolean flagg = true;
        if(hospital_table.getSelectedRow() >= 0){
            int hosp_num_del = (int)model11.getValueAt(hospital_table.getSelectedRow(),0);
        
            for(Hospital h: hospDir.getHospitalList()){
                System.out.println("Delete Hos: "+h.getHospNum()+ " Size: "+(h.getDoctorHospital()).size()+" UI: "+hosp_num_del);
                if( (h.getHospNum() == hosp_num_del) && ( (h.getDoctorHospital()).size() == 0))
                {   
                    to_delete = h;
                    JOptionPane.showMessageDialog(this,"Deleted");
                    flagg = false;
                }
            }
            hospDir.getHospitalList().remove(to_delete);
            for(City c: system.getCityList()){
                for(Community comm: c.getCommList()){
                    for(Hospital hos: comm.getHospitalList()){
                        if(hos.getHospNum() == hosp_num_del){
                            comm_delHosp = comm;         
                        }
                    }
                }
            }
            comm_delHosp.getHospitalList().remove(to_delete);

            populateHospTable();
        }
        else{
            JOptionPane.showMessageDialog(this,"Please Select a Hospital");
        }
        
        if(flagg == true){
            JOptionPane.showMessageDialog(this,"Cannot Delete Hospital with Patients");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void delDrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delDrBtnActionPerformed
        // TODO add your handling code here:
        model11 = (DefaultTableModel) doctor_table.getModel();
        long delete_hid = (long) model11.getValueAt(doctor_table.getSelectedRow(), 0);
        System.out.println(delete_hid);
        
        for(Doctor d: docDir.getDoctorList()){
            if(delete_hid == d.getId()){
                to_del_doc = d;
            }
        }
        System.out.println(to_del_doc.getPerson().getName());
        docDir.getDoctorList().remove(to_del_doc);
        
        for(City c: sys.getCityList()){
            for(Community com: c.getCommList()){
                for(Hospital hos: com.getHospitalList()){
                        hosp_dupl = hos;
                }
            }
        }
        
        if(hosp_dupl.getDoctorHospital().contains(to_del_doc)){
                        hosp_dupl.getDoctorHospital().remove(to_del_doc);
                        JOptionPane.showMessageDialog(this,"Doctor " +to_del_doc.getPerson().getName()+" Deleted!");
        }
        PopulateManageDoctorTable1();
        
    }//GEN-LAST:event_delDrBtnActionPerformed
    
    public void populateHospTable1(){
        model = (DefaultTableModel) hospital_table1.getModel();
        model11 = (DefaultTableModel) hospital_table.getModel();
        model.setRowCount(0);
        model11.setRowCount(0);
        for(City ci: sys.getCityList()){
            for(Community c: ci.getCommList()){
                for(Hospital h: c.getHospitalList()){
                    Object[] row = new Object[5];
                    row[0]= h.getHospNum();
                    row[1]= h.getStreetName();
                    row[2]= h.getCity();
                    row[3]= h.getZipcode();
                    row[4]= (h.getDoctorHospital()).size();
                    model.addRow(row);
                    model11.addRow(row);
                }
            }
        }
    }
    
    public void populateHospTable(){
       for(Community c: city.getCommList()){
            if(selectedCommunity == c.getCommName())
                community = c;
        }
        
        model.setRowCount(0);
        for(Hospital h: community.getHospitalList()){
            Object[] row = new Object[5];
            row[0]= h.getHospNum();
            row[1]= h.getStreetName();
            row[2]= h.getCity();
            row[3]= h.getZipcode();
            row[4]= (h.getDoctorHospital()).size();
            model.addRow(row);
        }
    }
    
    public void populateVitalTable(){
        DefaultTableModel model = (DefaultTableModel) encounter_table.getModel();
        model.setRowCount(0);
        for(Encounter e: selectedPat.getPatientEncounterHistory()){
            Object[] row = new Object[5];
            row[0] = e.getId();
            row[1] = e.getLastVisitDate();
            row[2] = e.getVital().getBloodPressure();
            row[3] = e.getVital().getHeartRate();
            row[4] = e.getVital().getWeight();
            model.addRow(row);
        }
    }
    
    private void showPersonTable(){
        DefaultTableModel model = (DefaultTableModel) persontable.getModel();
        DefaultTableModel model1 = (DefaultTableModel) persontable2.getModel();
        model.setRowCount(0);
        model1.setRowCount(0);

        for (Person person : pd.getPersonList()) {
            Object[] row = new Object[5];
            
            row[0] = person;
            row[1] = person.getAge();
            row[2] = person.getDob();
            row[3] = person.getContactNo();
            row[4] = person.getComm();
            model.addRow(row);
            model1.addRow(row);

        }
    }
    
    private void showCityTable(){
        DefaultTableModel modelcity = (DefaultTableModel) citytable.getModel();
        modelcity.setRowCount(0);

        for (City city : sys.getCityList()) {
            Object[] row = new Object[1];
            row[0] = city;
            modelcity.addRow(row);
        }
    }
    
    private void showCommunityTable(){
        DefaultTableModel modelcommunity = (DefaultTableModel) communitytable.getModel();
        modelcommunity.setRowCount(0);

        for (City city : sys.getCityList()) {
            for(Community comm: city.getCommList()){
            Object[] row = new Object[2];
            row[0] = city;
            row[1] = comm.getCommName();
            modelcommunity.addRow(row);
        }
     }
    }
    
    private void showPatientTable(){
        DefaultTableModel modelpatient = (DefaultTableModel) patienttable.getModel();
        modelpatient.setRowCount(0);
        
        for(Patient p: patDir.getPatientList()){
            Object[] row= new Object[3];
            row[0]= p.getId();
            row[1]= p.getPerson().getName();
            row[2]= p.getPerson().getAge();
            modelpatient.addRow(row);
        }
    }
    
    public void PopulateManageDoctorTable(){
        model11 = (DefaultTableModel) doctor_table1.getModel();
        model11.setRowCount(0);

        for(Doctor dr: docDir.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = dr.getId();
            row[1] = dr.getPerson().getContactNo();
            row[2] = dr.getPerson().getName();
            row[3] = dr.getPerson().getDob();
            model11.addRow(row);
        }
        
    }
    
    public void PopulateManageDoctorTable1(){
        model11 = (DefaultTableModel) doctor_table.getModel();
        model11.setRowCount(0);
        
        for(Doctor d: docDir.getDoctorList()){
            Object[] row= new Object[5];
            row[0] = d.getId();
            row[1] = d.getPerson().getContactNo();
            row[2] = d.getPerson().getName();
            row[3] = d.getPerson().getAge();
            row[4] = d.getPerson().getComm();
            model11.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_doctorBtn;
    private javax.swing.JButton add_doctorBtn1;
    private javax.swing.JButton add_vitals_button;
    private javax.swing.JComboBox<String> addcommunityComboBox;
    private javax.swing.JButton addpatientbtn;
    private javax.swing.JButton addpersontohousebtn;
    private javax.swing.JTextField blood_pressure;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JComboBox<String> cityComboBox1;
    private javax.swing.JComboBox<String> cityJTextField;
    private javax.swing.JTable citytable;
    private javax.swing.JComboBox<String> communityComboBox;
    private javax.swing.JComboBox<String> communityComboBox1;
    private javax.swing.JComboBox<String> communityTextField;
    private javax.swing.JComboBox<String> community_dropbox;
    private javax.swing.JTable communitytable;
    private javax.swing.JButton createCityBtn;
    private javax.swing.JButton createCommunityBtn;
    private javax.swing.JButton createPersonBtn;
    private javax.swing.JButton create_hospital_btn;
    private javax.swing.JButton delDrBtn;
    private javax.swing.JButton deleteCityBtn;
    private javax.swing.JButton deleteCommunityBtn;
    private javax.swing.JButton deleteEncounter;
    private javax.swing.JButton deletePersonBtn;
    private javax.swing.JButton delete_hosp_btn;
    private javax.swing.JButton deletepatientbtn;
    private javax.swing.JTextField doctor_birthdate;
    private javax.swing.JTextField doctor_birthdate1;
    private javax.swing.JTextField doctor_cellno;
    private javax.swing.JTextField doctor_cellno1;
    private javax.swing.JTextField doctor_name;
    private javax.swing.JTextField doctor_name1;
    private javax.swing.JTable doctor_table;
    private javax.swing.JTable doctor_table1;
    private javax.swing.JTable encounter_table;
    private javax.swing.JTextField heart_rate;
    private javax.swing.JComboBox<String> hopital_list;
    private javax.swing.JComboBox<String> hopital_list1;
    private javax.swing.JPanel hospAdmin;
    private javax.swing.JTextField hospNum;
    private javax.swing.JPanel hospitalJPanel;
    private javax.swing.JComboBox<String> hospital_dropbox;
    private javax.swing.JComboBox<String> hospital_dropbox1;
    private javax.swing.JPanel hospital_landingPage;
    private javax.swing.JTable hospital_table;
    private javax.swing.JTable hospital_table1;
    private javax.swing.JComboBox<String> houselistComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel landingPanel;
    private javax.swing.JPanel manageCity;
    private javax.swing.JButton manageCitybtn;
    private javax.swing.JButton manageDoctorbtn;
    private javax.swing.JPanel manageDoctors;
    private javax.swing.JButton manageDoctorsButton;
    private javax.swing.JPanel manageDoctorsPanel;
    private javax.swing.JButton manageEnc;
    private javax.swing.JPanel manageEncounter;
    private javax.swing.JButton manageHospitalbtn;
    private javax.swing.JPanel managePatient;
    private javax.swing.JButton managePatientbtn;
    private javax.swing.JPanel managePerson;
    private javax.swing.JButton managePersonbtn;
    private javax.swing.JComboBox<String> newcommunityComboBox;
    private javax.swing.JComboBox<String> patient_dropbox;
    private javax.swing.JTextField patientagetextfield;
    private javax.swing.JTextField patientidtextfield;
    private javax.swing.JTextField patientnametextfield;
    private javax.swing.JTable patienttable;
    private javax.swing.JTextField personAge;
    private javax.swing.JTextField personAge1;
    private javax.swing.JTextField personContactNo;
    private javax.swing.JTextField personContactNo1;
    private javax.swing.JTextField personDate;
    private javax.swing.JTextField personDate1;
    private javax.swing.JTextField personName;
    private javax.swing.JTextField personName1;
    private javax.swing.JTable person_dir_table;
    private javax.swing.JTable person_directory_table;
    private javax.swing.JTable persontable;
    private javax.swing.JTable persontable1;
    private javax.swing.JTable persontable2;
    private javax.swing.JTable persontable3;
    private javax.swing.JButton populatetables;
    private javax.swing.JButton populatetables1;
    private javax.swing.JButton saveHospDetails;
    private javax.swing.JButton save_updateddoctor;
    private javax.swing.JButton save_updateddoctor1;
    private javax.swing.JButton searchEncounter;
    private javax.swing.JButton search_comm1_btn;
    private javax.swing.JButton selectCity;
    private javax.swing.JTextField streetName;
    private javax.swing.JTextArea symptoms_ui;
    private javax.swing.JButton updateCityBtn;
    private javax.swing.JButton updateCommunityBtn;
    private javax.swing.JButton updateEncounter;
    private javax.swing.JComboBox<String> updateFilter;
    private javax.swing.JButton updatePersonBtn;
    private javax.swing.JTextField updateText;
    private javax.swing.JTextField update_hospital;
    private javax.swing.JTextField update_hospital1;
    private javax.swing.JButton update_hospital_btn;
    private javax.swing.JButton updatepatientbtn;
    private javax.swing.JButton viewCityBtn;
    private javax.swing.JButton viewCommunityBtn;
    private javax.swing.JButton viewPersonBtn;
    private javax.swing.JTable view_encounter;
    private javax.swing.JButton view_encounter_button;
    private javax.swing.JButton viewpatientbtn;
    private javax.swing.JTextField weight_ui;
    private javax.swing.JTextField zipcodeTextField;
    // End of variables declaration//GEN-END:variables
}
